{"version":3,"file":"ngx-pulse-lib.mjs","sources":["../../../projects/ngx-pulse-lib/src/utils/BaseRestResponse.ts","../../../projects/ngx-pulse-lib/src/utils/ActionResponse.ts","../../../projects/ngx-pulse-lib/src/utils/EntityResponse.ts","../../../projects/ngx-pulse-lib/src/utils/EntitiesResponse.ts","../../../projects/ngx-pulse-lib/src/utils/rest-util.ts","../../../projects/ngx-pulse-lib/src/config.ts","../../../projects/ngx-pulse-lib/src/lib/services/supportStreamAnalyticsConfig.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysAccountsService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysAuditLogService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysCheckpointsService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysConfigService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysFeaturesService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysGroupsService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysInsightsService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysKeysService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysMembersService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysRuleTemplatesService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysRulesService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysStatisticsService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysStreamsService.ts","../../../projects/ngx-pulse-lib/src/lib/services/sysUsersService.ts","../../../projects/ngx-pulse-lib/src/lib/services/usrInsightsService.ts","../../../projects/ngx-pulse-lib/src/lib/services/usrIntegrationsService.ts","../../../projects/ngx-pulse-lib/src/lib/services/usrMembersService.ts","../../../projects/ngx-pulse-lib/src/lib/services/usrUserService.ts","../../../projects/ngx-pulse-lib/src/lib/services/usrAlertsService.ts","../../../projects/ngx-pulse-lib/src/lib/services/usrDevicesService.ts","../../../projects/ngx-pulse-lib/src/lib/services/usrEventsService.ts","../../../projects/ngx-pulse-lib/src/lib/services/usrNetworkService.ts","../../../projects/ngx-pulse-lib/src/lib/services/usrReportsService.ts","../../../projects/ngx-pulse-lib/src/lib/services/usrRulesService.ts","../../../projects/ngx-pulse-lib/src/lib/services/services.export.ts","../../../projects/ngx-pulse-lib/src/ngx-pulse-lib.module.ts","../../../projects/ngx-pulse-lib/src/lib/common/AccountRole.ts","../../../projects/ngx-pulse-lib/src/lib/common/ConsumptionData.ts","../../../projects/ngx-pulse-lib/src/lib/common/ConsumptionTimeDataPoint.ts","../../../projects/ngx-pulse-lib/src/lib/common/DeviceConfig.ts","../../../projects/ngx-pulse-lib/src/lib/common/DeviceScoreConfig.ts","../../../projects/ngx-pulse-lib/src/lib/common/DevicesAtRiskConfig.ts","../../../projects/ngx-pulse-lib/src/lib/common/EventSeverityConfig.ts","../../../projects/ngx-pulse-lib/src/lib/common/FloatKeyValue.ts","../../../projects/ngx-pulse-lib/src/lib/common/GeoData.ts","../../../projects/ngx-pulse-lib/src/lib/common/GraphSeries.ts","../../../projects/ngx-pulse-lib/src/lib/common/Indicator.ts","../../../projects/ngx-pulse-lib/src/lib/common/IntKeySeriesDataValue.ts","../../../projects/ngx-pulse-lib/src/lib/common/IntKeyValue.ts","../../../projects/ngx-pulse-lib/src/lib/common/Interval.ts","../../../projects/ngx-pulse-lib/src/lib/common/Link.ts","../../../projects/ngx-pulse-lib/src/lib/common/Location.ts","../../../projects/ngx-pulse-lib/src/lib/common/LoginParams.ts","../../../projects/ngx-pulse-lib/src/lib/common/MaliciousIPCard.ts","../../../projects/ngx-pulse-lib/src/lib/common/MaliciousIPData.ts","../../../projects/ngx-pulse-lib/src/lib/common/NetworkMap.ts","../../../projects/ngx-pulse-lib/src/lib/common/Node.ts","../../../projects/ngx-pulse-lib/src/lib/common/SeriesData.ts","../../../projects/ngx-pulse-lib/src/lib/common/SessionTransform.ts","../../../projects/ngx-pulse-lib/src/lib/common/SeverityIntervalTuple.ts","../../../projects/ngx-pulse-lib/src/lib/common/ShieldexConfig.ts","../../../projects/ngx-pulse-lib/src/lib/common/StringIntValue.ts","../../../projects/ngx-pulse-lib/src/lib/common/StringKeyIntValue.ts","../../../projects/ngx-pulse-lib/src/lib/common/StringKeyValue.ts","../../../projects/ngx-pulse-lib/src/lib/common/Thresholds.ts","../../../projects/ngx-pulse-lib/src/lib/common/TimeDataPoint.ts","../../../projects/ngx-pulse-lib/src/lib/common/TimeDataPoint2D.ts","../../../projects/ngx-pulse-lib/src/lib/common/TimeDataPointFloat.ts","../../../projects/ngx-pulse-lib/src/lib/common/TimeFrame.ts","../../../projects/ngx-pulse-lib/src/lib/common/TimeSeries.ts","../../../projects/ngx-pulse-lib/src/lib/common/TimeSeriesOf2D.ts","../../../projects/ngx-pulse-lib/src/lib/common/TimeSeriesOfDataConsumption.ts","../../../projects/ngx-pulse-lib/src/lib/common/TimeSeriesOfFloat.ts","../../../projects/ngx-pulse-lib/src/lib/common/TokenData.ts","../../../projects/ngx-pulse-lib/src/lib/common/Tuple.ts","../../../projects/ngx-pulse-lib/src/lib/common/UsageTransform.ts","../../../projects/ngx-pulse-lib/src/lib/common/ZScore.ts","../../../projects/ngx-pulse-lib/src/lib/entities/BaseEntity.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Account.ts","../../../projects/ngx-pulse-lib/src/lib/entities/AccountDTO.ts","../../../projects/ngx-pulse-lib/src/lib/entities/AccountSettings.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Action.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Alert.ts","../../../projects/ngx-pulse-lib/src/lib/entities/AlertWithDevice.ts","../../../projects/ngx-pulse-lib/src/lib/entities/ApiKey.ts","../../../projects/ngx-pulse-lib/src/lib/entities/AuditLog.ts","../../../projects/ngx-pulse-lib/src/lib/entities/BulkDevices.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Checkpoint.ts","../../../projects/ngx-pulse-lib/src/lib/entities/ComplianceReportSettings.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Condition.ts","../../../projects/ngx-pulse-lib/src/lib/entities/ConfigParam.ts","../../../projects/ngx-pulse-lib/src/lib/entities/DNSRecord.ts","../../../projects/ngx-pulse-lib/src/lib/entities/DataIngestion.ts","../../../projects/ngx-pulse-lib/src/lib/entities/DataPointOfDeviceReport.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Device.ts","../../../projects/ngx-pulse-lib/src/lib/entities/DeviceReport.ts","../../../projects/ngx-pulse-lib/src/lib/entities/DeviceWithEvents.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Distribution.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Event.ts","../../../projects/ngx-pulse-lib/src/lib/entities/EventOccurrence.ts","../../../projects/ngx-pulse-lib/src/lib/entities/EventWithDevice.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Feature.ts","../../../projects/ngx-pulse-lib/src/lib/entities/FeaturesGroup.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Group.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Image.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Insight.ts","../../../projects/ngx-pulse-lib/src/lib/entities/InsightQuery.ts","../../../projects/ngx-pulse-lib/src/lib/entities/InsightSpec.ts","../../../projects/ngx-pulse-lib/src/lib/entities/IntDistribution.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Integration.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Member.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Radius.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Report.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Rule.ts","../../../projects/ngx-pulse-lib/src/lib/entities/RuleTemplate.ts","../../../projects/ngx-pulse-lib/src/lib/entities/SIM.ts","../../../projects/ngx-pulse-lib/src/lib/entities/ServiceStatus.ts","../../../projects/ngx-pulse-lib/src/lib/entities/SessionRecord.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Shieldex.ts","../../../projects/ngx-pulse-lib/src/lib/entities/Stream.ts","../../../projects/ngx-pulse-lib/src/lib/entities/StreamAnalyticsConfig.ts","../../../projects/ngx-pulse-lib/src/lib/entities/StreamConfig.ts","../../../projects/ngx-pulse-lib/src/lib/entities/TeaserPopUpSettings.ts","../../../projects/ngx-pulse-lib/src/lib/entities/TimeSeriesOfDeviceReport.ts","../../../projects/ngx-pulse-lib/src/lib/entities/UsageRecord.ts","../../../projects/ngx-pulse-lib/src/lib/entities/User.ts","../../../projects/ngx-pulse-lib/src/lib/entities/UserMembership.ts","../../../projects/ngx-pulse-lib/src/lib/entities/UserMemberships.ts","../../../projects/ngx-pulse-lib/src/lib/enums/AccountStatusCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/AccountTypeCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/DataSourceCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/DeviceActionCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/DeviceCreationCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/DeviceIdentityCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/DeviceStatusCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/DeviceTypeCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/DirectionContextCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/EventCategoryCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/EventStatusCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/EventTypeCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/FeatureCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/HomePageViewCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/HttpMethodCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/InsightStatusCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/InsightTypeCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/IntegrationTriggerCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/IntegrationTypeCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/MemberRoleCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/NetworkMapTypeCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/OperatorCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/PermissionCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/ReportTypeCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/RuleTypeCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/SeverityTypeCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/TrafficDirectionCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/UserStatusCode.ts","../../../projects/ngx-pulse-lib/src/lib/enums/UserTypeCode.ts","../../../projects/ngx-pulse-lib/src/public-api.ts","../../../projects/ngx-pulse-lib/src/ngx-pulse-lib.ts"],"sourcesContent":["\n// BaseRestResponse is a common structure for all response types\nexport class BaseRestResponse {\n\n    // Error code (0 for success)\n    public code: number = 0;\n\n    // Error message\n    public error: string = '';\n}","import { BaseRestResponse } from './BaseRestResponse'\n\n// ActionResponse message is returned for any action on entity with no return data (e.d. delete)\nexport class ActionResponse extends BaseRestResponse {\n\n    // Entity key\n    public key: string = '';\n\n    // Additional data\n    public data: string = '';\n}\n\n\n","import { BaseRestResponse } from './BaseRestResponse'\n\n// EntitiesResponse message is returned for any action returning multiple entities\nexport class EntityResponse<T> extends BaseRestResponse {\n\n    // Current page (Bulk) number\n    public page: number = 0;\n\n    // Size of page (items in bulk)\n    public size: number = 0;\n\n    // Total number of pages\n    public pages: number = 0;\n\n    // Total number of items in the query\n    public total: number = 0;\n\n    // List of entities\n    public entity: T;\n}\n","import { BaseRestResponse } from './BaseRestResponse'\n\n// EntitiesResponse message is returned for any action returning multiple entities\nexport class EntitiesResponse<T> extends BaseRestResponse {\n\n    // Current page (Bulk) number\n    public page: number = 0;\n\n    // Size of page (items in bulk)\n    public size: number = 0;\n\n    // Total number of pages\n    public pages: number = 0;\n\n    // Total number of items in the query\n    public total: number = 0;\n\n    // List of entities\n    public list: T[] = [];\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type':  'application/json',\n    'Cache-Control': 'no-cache, no-store',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, X-API-KEY, X-ACCESS-TOKEN, X-TIMEZONE, accept, origin, Cache-Control, X-Requested-With, Authorization, Content-Disposition, Content-Filename',\n    'Access-Control-Exposed-Headers': 'X-API-KEY, X-ACCESS-TOKEN, X-TIMEZONE, Content-Disposition, Content-Filename',\n  })\n};\n\n\n// Utility class for all REST services with common functions\n@Injectable()\nexport class RestUtil {\n\n  // Constructor with injected authentication service\n  constructor(private http: HttpClient) { }\n\n  // Upload is HTTP POST action but the body is File object\n  upload<T>(file: File, url: string, ...params: string[]) {\n\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    const formData: FormData = new FormData();\n    formData.append('fileKey', file, file.name);\n\n    const req = new HttpRequest('POST', resourceUrl, formData, {\n      reportProgress: false,\n      responseType: 'json',\n    });\n    return this.http.request<T>(req);\n    //return this.http.request(req);\n  }\n\n  // Download is HTTP GET action but the content is blob\n  download(fileName: string, url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    let downloadLink = fileName\n\n    // extract file name\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'filename') {\n          downloadLink = arr[1];\n        }\n      }\n    });\n\n    // Set content type for: json / csv / xml / pdf /xslx\n    let contentType = this.getMimeType(downloadLink);\n\n    return this.http.get(resourceUrl, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events',\n      headers: new HttpHeaders({ 'Content-Type': contentType })\n    });\n  }\n\n  // Download2 is an alternative option to download\n  download2(fileName: string, url: string, ...params: string[]) {\n\n    let downloadLink = fileName\n\n    // extract file name\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'filename') {\n          downloadLink = arr[1];\n        }\n      }\n    });\n\n    let contentType = this.getMimeType(fileName);\n\n    const link = document.createElement('a');\n    link.href = this.buildUrl(url, ...params);\n    link.download = downloadLink;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n  }\n\n  // HTTP GET action\n  get<T>(url: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.get<T>(resourceUrl, httpOptions)\n  }\n\n  // HTTP POST action\n  post<T>(url: string, body?: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.post<T>(resourceUrl, body, httpOptions)\n  }\n\n  // HTTP PUT action\n  put<T>(url: string, body?: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.put<T>(resourceUrl, body, httpOptions)\n  }\n\n  // HTTP PATCH action\n  patch<T>(url: string, body?: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.patch<T>(resourceUrl, body, httpOptions)\n  }\n\n  // HTTP DELETE action\n  delete<T>(url: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.delete<T>(resourceUrl, httpOptions)\n  }\n\n  // Construct URL with parameters\n  private buildUrl(url: string, ...params: string[]) {\n    return (params === null) ? url : (params.length === 0) ? url : `${url}${params && params.length > 0 ? '?'+params.join('&') : ''}`;\n  }\n\n  // Return MIME type based on file extension\n  private getMimeType(fileName: string): string {\n    // Set content type for: json / csv / xml / pdf /xslx\n    let contentType = 'application/json';\n    if (fileName.toLowerCase().endsWith('csv')) {\n      contentType = 'text/csv';\n    } else if (fileName.toLowerCase().endsWith('xml')) {\n      contentType = 'text/xml';\n    } else if (fileName.toLowerCase().endsWith('pdf')) {\n      contentType = 'application/pdf';\n    } else if (fileName.toLowerCase().endsWith('xlsx')) {\n      contentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    }\n    return contentType\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class PulseConfig {\n    api: string = '';\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { StreamAnalyticsConfig } from '../entities/StreamAnalyticsConfig';\n\n\n\n// List of AI support related actions for system support only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SupportStreamAnalyticsConfig {\n\n  // URL to web api\n  private baseUrl = '/support/stream-analytics-config';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new stream analytics configuration\n   */\n  create(body?: StreamAnalyticsConfig) {\n    return this.rest.put<EntityResponse<StreamAnalyticsConfig>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing stream analytics configuration\n   */\n  update(body?: StreamAnalyticsConfig) {\n    return this.rest.patch<EntityResponse<StreamAnalyticsConfig>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete stream analytics configuration from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single stream analytics configuration by stream id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<StreamAnalyticsConfig>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of stream analytics configurations by query\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<StreamAnalyticsConfig>>(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Account } from '../entities/Account';\nimport { AccountSettings } from '../entities/AccountSettings';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { Image } from '../entities/Image';\n\n\n\n// List of account related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysAccountsService {\n\n  // URL to web api\n  private baseUrl = '/sys/accounts';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new account\n   */\n  create(body?: Account) {\n    return this.rest.put<EntityResponse<Account>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing account in the system\n   */\n  update(body?: Account) {\n    return this.rest.patch<EntityResponse<Account>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing account settings in the system\n   */\n  updateSettings(body?: AccountSettings) {\n    return this.rest.patch<ActionResponse>(`${this.baseUrl}/{id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete account from the system and all its related content\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single account by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Account>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of accounts by query\n   */\n  find(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Account>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Save account's logo image\n   */\n  saveLogo() {\n    return this.rest.patch<ActionResponse>(`${this.baseUrl}/logo`, '');\n  }\n\n  /**\n   * Get account's logo image\n   */\n  getLogo(id?: string) {\n    return this.rest.get<EntityResponse<Image>>(`${this.baseUrl}/logo`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { AuditLog } from '../entities/AuditLog';\nimport { TimeSeriesOfFloat } from '../common/TimeSeriesOfFloat';\n\n\n\n// List of audit log queries for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysAuditLogService {\n\n  // URL to web api\n  private baseUrl = '/sys/audit-log';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single log entry by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<AuditLog>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of log entries by query\n   */\n  find(from?: number, to?: number, accountId?: string, userId?: string, action?: string, itemType?: string, itemId?: string, itemName?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (action != null) { params.push(`action=${action}`); }\n    if (itemType != null) { params.push(`itemType=${itemType}`); }\n    if (itemId != null) { params.push(`itemId=${itemId}`); }\n    if (itemName != null) { params.push(`itemName=${itemName}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<AuditLog>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get histogram of audit log entries over time\n   */\n  getTimeline(from?: number, to?: number, accountId?: string, userId?: string, action?: string, itemType?: string, itemId?: string, itemName?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (action != null) { params.push(`action=${action}`); }\n    if (itemType != null) { params.push(`itemType=${itemType}`); }\n    if (itemId != null) { params.push(`itemId=${itemId}`); }\n    if (itemName != null) { params.push(`itemName=${itemName}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<TimeSeriesOfFloat>>(`${this.baseUrl}/timeline`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Checkpoint } from '../entities/Checkpoint';\nimport { TimeSeriesOfFloat } from '../common/TimeSeriesOfFloat';\n\n\n\n// List of checkpoints queries for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysCheckpointsService {\n\n  // URL to web api\n  private baseUrl = '/sys/checkpoints';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get a single checkpoint entry by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Checkpoint>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find a list of checkpoint entries by query\n   */\n  find(from?: number, to?: number, accountId?: string, streamId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Checkpoint>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get histogram of checkpoints over time\n   */\n  checkpointsTimeline(from?: number, to?: number, accountId?: string, streamId?: string, field?: string, timeField?: string) {\n    const params = [];\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (field != null) { params.push(`field=${field}`); }\n    if (timeField != null) { params.push(`timeField=${timeField}`); }\n\n\t\treturn this.rest.get<EntityResponse<TimeSeriesOfFloat>>(`${this.baseUrl}/timeline`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { ConfigParam } from '../entities/ConfigParam';\n\n\n\n// List of system configuration parameters related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysConfigService {\n\n  // URL to web api\n  private baseUrl = '/sys/config';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new configuration parameter\n   */\n  create(body?: ConfigParam) {\n    return this.rest.put<EntityResponse<ConfigParam>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing configuration parameter in the system\n   */\n  update(body?: ConfigParam) {\n    return this.rest.patch<EntityResponse<ConfigParam>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a configuration parameter from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single configuration parameter by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<ConfigParam>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of configuration parameters by query\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<ConfigParam>>(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Feature } from '../entities/Feature';\nimport { FeaturesGroup } from '../entities/FeaturesGroup';\n\n\n\n// List of features actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysFeaturesService {\n\n  // URL to web api\n  private baseUrl = '/sys/features';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Find list of feature\n   */\n  findFeatures(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Feature>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Create new features group\n   */\n  createFeaturesGroup(body?: FeaturesGroup) {\n    return this.rest.put<EntityResponse<FeaturesGroup>>(`${this.baseUrl}/groups`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing features group\n   */\n  updateFeaturesGroup(body?: FeaturesGroup) {\n    return this.rest.patch<EntityResponse<FeaturesGroup>>(`${this.baseUrl}/groups`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete features group from the system\n   */\n  deleteFeaturesGroup(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/groups/${id}`);\n  }\n\n  /**\n   * Get single features group by id\n   */\n  getFeaturesGroup(id?: string) {\n    return this.rest.get<EntityResponse<FeaturesGroup>>(`${this.baseUrl}/groups/${id}`);\n  }\n\n  /**\n   * Find list of features groups\n   */\n  findFeaturesGroups(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<FeaturesGroup>>(`${this.baseUrl}/groups`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Group } from '../entities/Group';\nimport { User } from '../entities/User';\n\n\n\n// List of groups related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysGroupsService {\n\n  // URL to web api\n  private baseUrl = '/sys/groups';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new groups\n   */\n  create(body?: Group) {\n    return this.rest.put<EntityResponse<Group>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing group in the system\n   */\n  update(body?: Group) {\n    return this.rest.patch<EntityResponse<Group>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a group from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single group by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Group>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of groups by query\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Group>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get list of all users in the group\n   */\n  getUsers(id?: string) {\n    return this.rest.get<EntityResponse<User>>(`${this.baseUrl}/${id}/users`);\n  }\n\n  /**\n   * Add user to the group\n   */\n  setDefaultAccount(id?: string, userId?: string) {\n    return this.rest.put<ActionResponse>(`${this.baseUrl}/${id}/users/${userId}`, '');\n  }\n\n  /**\n   * Remove user from the group\n   */\n  getAccessToken(id?: string, userId?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}/users/${userId}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { InsightQuery } from '../entities/InsightQuery';\nimport { InsightSpec } from '../entities/InsightSpec';\n\n\n\n// List of insight queries related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysInsightsService {\n\n  // URL to web api\n  private baseUrl = '/sys/insights';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new insight query\n   */\n  createQuery(body?: InsightQuery) {\n    return this.rest.put<EntityResponse<InsightQuery>>(`${this.baseUrl}/query`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing insight query\n   */\n  updateQuery(body?: InsightQuery) {\n    return this.rest.patch<EntityResponse<InsightQuery>>(`${this.baseUrl}/query`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete insight query from the system\n   */\n  deleteQuery(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/query/${id}`);\n  }\n\n  /**\n   * Get single insight query by id\n   */\n  getQuery(id?: string) {\n    return this.rest.get<EntityResponse<InsightQuery>>(`${this.baseUrl}/query/${id}`);\n  }\n\n  /**\n   * Find list of insight queries\n   */\n  findQueries(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<InsightQuery>>(`${this.baseUrl}/query`, ...params);\n  }\n\n  /**\n   * Create new insight spec\n   */\n  createSpec(body?: InsightSpec) {\n    return this.rest.put<EntityResponse<InsightSpec>>(`${this.baseUrl}/spec`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing insight spec\n   */\n  updateSpec(body?: InsightSpec) {\n    return this.rest.patch<EntityResponse<InsightSpec>>(`${this.baseUrl}/spec`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete insight spec from the system\n   */\n  deleteSpec(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/spec/${id}`);\n  }\n\n  /**\n   * Get single insight spec by id\n   */\n  getSpec(id?: string) {\n    return this.rest.get<EntityResponse<InsightSpec>>(`${this.baseUrl}/spec/${id}`);\n  }\n\n  /**\n   * Find list of insight specs\n   */\n  findSpecs(accountId?: string, streamId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<InsightSpec>>(`${this.baseUrl}/spec`, ...params);\n  }\n\n  /**\n   * Find list of insight specs\n   */\n  findSpecsQueries(accountId?: string, streamId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<InsightQuery>>(`${this.baseUrl}/spec-queries`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { ApiKey } from '../entities/ApiKey';\nimport { StringIntValue } from '../common/StringIntValue';\n\n\n\n// List of API keys related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysKeysService {\n\n  // URL to web api\n  private baseUrl = '/sys/keys';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new API key\n   */\n  create(body?: ApiKey) {\n    return this.rest.put<EntityResponse<ApiKey>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing API key in the system\n   */\n  update(body?: ApiKey) {\n    return this.rest.patch<EntityResponse<ApiKey>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete API key from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single API key by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<ApiKey>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of API keys by free test search\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<ApiKey>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get list of services for the ACL\n   */\n  listServices() {\n    return this.rest.get<EntitiesResponse<StringIntValue>>(`${this.baseUrl}/services`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Member } from '../entities/Member';\nimport { MemberRoleCode } from '../enums/MemberRoleCode';\n\n\n\n// List of members related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysMembersService {\n\n  // URL to web api\n  private baseUrl = '/sys/members';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new member\n   */\n  create(body?: Member) {\n    return this.rest.put<EntityResponse<Member>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing member in the system\n   */\n  update(body?: Member) {\n    return this.rest.patch<EntityResponse<Member>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete member from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single member by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Member>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of members by query\n   */\n  find(accountId?: string, userId?: string, role?: MemberRoleCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (role != null) { params.push(`role=${role}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Member>>(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { RuleTemplate } from '../entities/RuleTemplate';\n\n\n\n// List of rule templates related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysRuleTemplatesService {\n\n  // URL to web api\n  private baseUrl = '/sys/rule-templates';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new rule template\n   */\n  create(body?: RuleTemplate) {\n    return this.rest.put<EntityResponse<RuleTemplate>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing rule template\n   */\n  update(body?: RuleTemplate) {\n    return this.rest.patch<EntityResponse<RuleTemplate>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a rule template from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single rule template by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<RuleTemplate>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of rule templates by query\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<RuleTemplate>>(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Rule } from '../entities/Rule';\nimport { TimeSeriesOfFloat } from '../common/TimeSeriesOfFloat';\n\n\n\n// List of rules related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysRulesService {\n\n  // URL to web api\n  private baseUrl = '/sys/rules';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new rule\n   */\n  create(body?: Rule) {\n    return this.rest.put<EntityResponse<Rule>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing rule in the system\n   */\n  update(body?: Rule) {\n    return this.rest.patch<EntityResponse<Rule>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a rule from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single rule by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Rule>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of rules by query\n   */\n  find(accountId?: string, streamId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Rule>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Analyze rule configuration against historic data\n   */\n  analyze(from?: number, to?: number, interval?: number, size?: number, body?: Rule) {\n    const params = [];\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (interval != null) { params.push(`interval=${interval}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.post<EntityResponse<TimeSeriesOfFloat>>(`${this.baseUrl}/analyze`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Distribution } from '../entities/Distribution';\n\n\n\n// List of system statistics information for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysStatisticsService {\n\n  // URL to web api\n  private baseUrl = '/sys/statistics';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get accounts distribution by field\n   */\n  getAccountsCount(field?: string) {\n    return this.rest.get<EntityResponse<Distribution>>(`${this.baseUrl}/accounts/${field}`);\n  }\n\n  /**\n   * Get streams distribution by field\n   */\n  getStreamsCount(field?: string) {\n    return this.rest.get<EntityResponse<Distribution>>(`${this.baseUrl}/streams/${field}`);\n  }\n\n  /**\n   * Get devices distribution by field\n   */\n  getDevicesCount(field?: string) {\n    return this.rest.get<EntityResponse<Distribution>>(`${this.baseUrl}/devices/${field}`);\n  }\n\n  /**\n   * Get users distribution by field\n   */\n  getUsersCount(field?: string) {\n    return this.rest.get<EntityResponse<Distribution>>(`${this.baseUrl}/users/${field}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Stream } from '../entities/Stream';\n\n\n\n// List of stream related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysStreamsService {\n\n  // URL to web api\n  private baseUrl = '/sys/streams';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new stream\n   */\n  create(body?: Stream) {\n    return this.rest.put<EntityResponse<Stream>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing stream in the system\n   */\n  update(body?: Stream) {\n    return this.rest.patch<EntityResponse<Stream>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a stream from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single stream by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Stream>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of streams by query\n   */\n  find(accountId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Stream>>(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { User } from '../entities/User';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { UserMemberships } from '../entities/UserMemberships';\n\n\n\n// List of users related actions for system administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class SysUsersService {\n\n  // URL to web api\n  private baseUrl = '/sys/users';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new user\n   */\n  create(body?: User) {\n    return this.rest.put<EntityResponse<User>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing user in the system\n   */\n  update(body?: User) {\n    return this.rest.patch<EntityResponse<User>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a user from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<User>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of users by query\n   */\n  find(search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<User>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Create new user with all its accounts memberships\n   */\n  createMembership(body?: UserMemberships) {\n    return this.rest.post<EntityResponse<UserMemberships>>(`${this.baseUrl}/memberships`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update user's default account\n   */\n  setDefaultAccount(id?: string, accountId?: string) {\n    return this.rest.patch<ActionResponse>(`${this.baseUrl}/${id}/${accountId}`, '');\n  }\n\n  /**\n   * Update access token\n   */\n  getAccessToken(id?: string) {\n    return this.rest.get<ActionResponse>(`${this.baseUrl}/${id}/access-token`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Insight } from '../entities/Insight';\n\n\n\n// List of integrations related actions for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UsrInsightsService {\n\n  // URL to web api\n  private baseUrl = '/insights';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Find list of insights by day\n   */\n  getDailyInsights(dayId?: string) {\n    return this.rest.get<EntitiesResponse<Insight>>(`${this.baseUrl}/daily/${dayId}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Integration } from '../entities/Integration';\n\n\n\n// List of integrations related actions for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UsrIntegrationsService {\n\n  // URL to web api\n  private baseUrl = '/integrations';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new integration\n   */\n  create(body?: Integration) {\n    return this.rest.put<EntityResponse<Integration>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing integration\n   */\n  update(body?: Integration) {\n    return this.rest.patch<EntityResponse<Integration>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete integration from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single integration by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Integration>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of integrations by query\n   */\n  find(accountId?: string, streamId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Integration>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Validate format of the templates in the fields\n   */\n  validate(body?: Integration) {\n    return this.rest.post<EntityResponse<Integration>>(`${this.baseUrl}/validate`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Test the integration with pseudo data\n   */\n  test(body?: Integration) {\n    return this.rest.post<EntityResponse<Integration>>(`${this.baseUrl}/test`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Member } from '../entities/Member';\nimport { MemberRoleCode } from '../enums/MemberRoleCode';\n\n\n\n// List of members related actions for account administrator only \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UsrMembersService {\n\n  // URL to web api\n  private baseUrl = '/members';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new member\n   */\n  create(body?: Member) {\n    return this.rest.put<EntityResponse<Member>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing member in the system\n   */\n  update(body?: Member) {\n    return this.rest.patch<EntityResponse<Member>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete member from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single member by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Member>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of members by query\n   */\n  find(userId?: string, role?: MemberRoleCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (role != null) { params.push(`role=${role}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Member>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find list of registered emails by query\n   */\n  findEmails(search?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Member>>(`${this.baseUrl}/emails`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { LoginParams } from '../common/LoginParams';\nimport { User } from '../entities/User';\nimport { AccountDTO } from '../entities/AccountDTO';\nimport { Image } from '../entities/Image';\nimport { Feature } from '../entities/Feature';\nimport { Stream } from '../entities/Stream';\nimport { UserMemberships } from '../entities/UserMemberships';\n\n\n\n// List of user related actions \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UsrUserService {\n\n  // URL to web api\n  private baseUrl = '/user';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Authorize user, verify user exists in the system (user was already authenticated by OAuth provider)\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   */\n  authorize(body?: LoginParams) {\n    return this.rest.post<EntityResponse<User>>(`${this.baseUrl}/authorize`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * The response includes the account details and the newly refreshed token in the HTTP header X-ACCESS-TOKEN\n   */\n  setAccount(id?: string) {\n    return this.rest.post<EntityResponse<AccountDTO>>(`${this.baseUrl}/set-account/${id}`, '');\n  }\n\n  /**\n   * Get the user's current account details\n   */\n  getAccount() {\n    return this.rest.get<EntityResponse<AccountDTO>>(`${this.baseUrl}/get-account`);\n  }\n\n  /**\n   * Get user's current account logo\n   */\n  getAccountLogo() {\n    return this.rest.get<EntityResponse<Image>>(`${this.baseUrl}/get-account-logo`);\n  }\n\n  /**\n   * Get the user's current account features (aggregated list of all features in all the account's features groups)\n   */\n  getAccountFeatures() {\n    return this.rest.get<EntitiesResponse<Feature>>(`${this.baseUrl}/get-account-features`);\n  }\n\n  /**\n   * Get the user's current account streams (accessible by the user)\n   */\n  getAccountStreams() {\n    return this.rest.get<EntitiesResponse<Stream>>(`${this.baseUrl}/get-account-streams`);\n  }\n\n  /**\n   * Get all the user memberships (all accounts that the current user has access to)\n   */\n  getMemberships() {\n    return this.rest.get<EntityResponse<UserMemberships>>(`${this.baseUrl}/memberships`);\n  }\n\n  /**\n   * Save user's avatar image\n   */\n  saveAvatar(body?: Image) {\n    return this.rest.patch<ActionResponse>(`${this.baseUrl}/avatar`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get user's avatar image\n   */\n  getAvatar() {\n    return this.rest.get<EntityResponse<Image>>(`${this.baseUrl}/avatar`);\n  }\n\n  /**\n   * Get arbitrary image by Id\n   */\n  getImage(id?: string) {\n    return this.rest.get<EntityResponse<Image>>(`${this.baseUrl}/images`);\n  }\n\n  /**\n   * Get arbitrary image by Id as stream of bytes\n   */\n  getImageBytes(id?: string) {\n    return this.rest.download(`usr-user`,`${this.baseUrl}/image-bytes`);\n  }\n\n  /**\n   * Get personal access token\n   */\n  getAccessToken() {\n    return this.rest.get<ActionResponse>(`${this.baseUrl}/access-token`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { EventCategoryCode } from '../enums/EventCategoryCode';\nimport { DeviceActionCode } from '../enums/DeviceActionCode';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { Alert } from '../entities/Alert';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { TimeSeriesOf2D } from '../common/TimeSeriesOf2D';\nimport { TimeSeriesOfFloat } from '../common/TimeSeriesOfFloat';\nimport { MaliciousIPCard } from '../common/MaliciousIPCard';\nimport { EventStatusCode } from '../enums/EventStatusCode';\nimport { MaliciousIPData } from '../common/MaliciousIPData';\nimport { IntDistribution } from '../entities/IntDistribution';\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { AlertWithDevice } from '../entities/AlertWithDevice';\n\n\n\n// List of alerts related actions for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UsrAlertsService {\n\n  // URL to web api\n  private baseUrl = '/alerts';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single alert by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Alert>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of alerts by query\n   */\n  find(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number, withoutOccurrences?: boolean) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n    if (withoutOccurrences != null) { params.push(`withoutOccurrences=${withoutOccurrences}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Alert>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Export list of alerts by query to a file with the specified format\n   */\n  exportFormat(format?: string, streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.download(`usr-alerts`,`${this.baseUrl}/export/${format}`, ...params);\n  }\n\n  /**\n   * Find top 10 alerts by their severity filter by query\n   */\n  getTop(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number, withoutOccurrences?: boolean) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n    if (withoutOccurrences != null) { params.push(`withoutOccurrences=${withoutOccurrences}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<AlertWithDevice>>(`${this.baseUrl}/top`, ...params);\n  }\n\n  /**\n   * Get top malicious IPs\n   */\n  getTopMaliciousIPs(streamId?: string, top?: number, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (top != null) { params.push(`top=${top}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<MaliciousIPData>>(`${this.baseUrl}/top-malicious-ips`, ...params);\n  }\n\n  /**\n   * Find alerts distribution by type filtered by query\n   */\n  countByType(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number, withoutOccurrences?: boolean) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n    if (withoutOccurrences != null) { params.push(`withoutOccurrences=${withoutOccurrences}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-type`, ...params);\n  }\n\n  /**\n   * Find alerts distribution by status filtered by query\n   */\n  countByStatus(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number, withoutOccurrences?: boolean) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n    if (withoutOccurrences != null) { params.push(`withoutOccurrences=${withoutOccurrences}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-status`, ...params);\n  }\n\n  /**\n   * Find alerts distribution by severity filtered by query\n   */\n  countBySeverity(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number, withoutOccurrences?: boolean) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n    if (withoutOccurrences != null) { params.push(`withoutOccurrences=${withoutOccurrences}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-severity`, ...params);\n  }\n\n  /**\n   * Find alerts distribution by rule filtered by query\n   */\n  countByRule(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number, withoutOccurrences?: boolean) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n    if (withoutOccurrences != null) { params.push(`withoutOccurrences=${withoutOccurrences}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-rule`, ...params);\n  }\n\n  /**\n   * Find alerts distribution by category filtered by query\n   */\n  countByCategory(streamId?: string, deviceId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number, withoutOccurrences?: boolean) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n    if (withoutOccurrences != null) { params.push(`withoutOccurrences=${withoutOccurrences}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-category`, ...params);\n  }\n\n  /**\n   * Add tag to an alert\n   */\n  addTag(id?: string, tag?: string) {\n    return this.rest.post<EntityResponse<Alert>>(`${this.baseUrl}/${id}/tags/${tag}`, '');\n  }\n\n  /**\n   * Delete a tag from the alert\n   */\n  deleteTag(id?: string, tag?: string) {\n    return this.rest.delete<EntityResponse<Alert>>(`${this.baseUrl}/${id}/tags/${tag}`);\n  }\n\n  /**\n   * Apply action on an alert\n   */\n  applyAction(id?: string, action?: DeviceActionCode) {\n    return this.rest.post<ActionResponse>(`${this.baseUrl}/${id}/actions/${action}`, '');\n  }\n\n  /**\n   * Set alert status\n   */\n  setStatus(id?: string, status?: EventStatusCode) {\n    return this.rest.post<ActionResponse>(`${this.baseUrl}/${id}/status/${status}`, '');\n  }\n\n  /**\n   * Get current shieldex value as ActionResponse, the Key contains the shield index and the data includes the trend\n   */\n  getShieldex() {\n    return this.rest.get<ActionResponse>(`${this.baseUrl}/shieldex`);\n  }\n\n  /**\n   * Get histogram of alerts over time by dimension (type | severity | status | ruleType | category)\n   */\n  alertsTimeline(streamId?: string, deviceId?: string, dimension?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (dimension != null) { params.push(`dimension=${dimension}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<TimeSeriesOf2D>>(`${this.baseUrl}/timeline`, ...params);\n  }\n\n  /**\n   * Get histogram of shieldex values over time\n   */\n  shieldexTimeline(streamId?: string, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get<EntityResponse<TimeSeriesOfFloat>>(`${this.baseUrl}/shieldex/timeline`, ...params);\n  }\n\n  /**\n   * Export alert source file\n   */\n  exportSource(id?: string) {\n    return this.rest.download(`usr-alerts`,`${this.baseUrl}/${id}/export_source`);\n  }\n\n  /**\n   * Get total number devices at risk (affected by the alerts matching the query)\n   */\n  getTotalDevicesAtRisk(streamId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[]) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n\n\t\treturn this.rest.get<ActionResponse>(`${this.baseUrl}/devices-at-risk`, ...params);\n  }\n\n  /**\n   * Get malicious IP data card for specific malicious IP\n   */\n  getMaliciousIpCard(streamId?: string, targetIp?: string, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get<EntityResponse<MaliciousIPCard>>(`${this.baseUrl}/malicious-ip-card`, ...params);\n  }\n\n  /**\n   * Apply DNS lookup for each IP in the list\n   */\n  getIpLookup(ip?: string[]) {\n    const params = [];\t\t\n    if (ip != null) { params.push(`ip=${ip}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<StringKeyValue>>(`${this.baseUrl}/ip-lookup`, ...params);\n  }\n\n  /**\n   * Find list of alerts by insight id query\n   */\n  findByInsightContext() {\n    return this.rest.get<EntitiesResponse<Alert>>(`${this.baseUrl}/find-by-insight-context`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { DeviceReport } from '../entities/DeviceReport';\nimport { BulkDevices } from '../entities/BulkDevices';\nimport { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { DeviceActionCode } from '../enums/DeviceActionCode';\nimport { DeviceWithEvents } from '../entities/DeviceWithEvents';\nimport { IntDistribution } from '../entities/IntDistribution';\nimport { NetworkMapTypeCode } from '../enums/NetworkMapTypeCode';\nimport { NetworkMap } from '../common/NetworkMap';\nimport { TimeSeriesOfDeviceReport } from '../entities/TimeSeriesOfDeviceReport';\nimport { Device } from '../entities/Device';\nimport { DeviceStatusCode } from '../enums/DeviceStatusCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { TimeSeriesOfDataConsumption } from '../common/TimeSeriesOfDataConsumption';\n\n\n\n// List of device related actions for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UsrDevicesService {\n\n  // URL to web api\n  private baseUrl = '/devices';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new device\n   */\n  create(body?: Device) {\n    return this.rest.put<EntityResponse<Device>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Create bulk of new device, returns list of inserted items\n   */\n  bulkCreate(body?: BulkDevices) {\n    return this.rest.put<EntitiesResponse<Device>>(`${this.baseUrl}/bulk`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing device in the system\n   */\n  update(body?: Device) {\n    return this.rest.patch<EntityResponse<Device>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update bulk of device, returns list of updated items\n   */\n  bulkUpdate(body?: BulkDevices) {\n    return this.rest.patch<EntitiesResponse<Device>>(`${this.baseUrl}/bulk`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete device from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single device by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Device>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of devices by query\n   */\n  find(streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: SeverityTypeCode[], scoreRange?: number[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (scoreRange != null) { params.push(`scoreRange=${scoreRange}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Device>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Export list of devices by query to a file with the specified format\n   */\n  exportFormat(format?: string, streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: SeverityTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.download(`devices`,`${this.baseUrl}/export/${format}`, ...params);\n  }\n\n  /**\n   * Find top 10 devices by their score filter by query\n   */\n  findTop(streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: SeverityTypeCode[], scoreRange?: number[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (scoreRange != null) { params.push(`scoreRange=${scoreRange}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<DeviceWithEvents>>(`${this.baseUrl}/top`, ...params);\n  }\n\n  /**\n   * Find device distribution by type filtered by query\n   */\n  countByType(streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: SeverityTypeCode[], scoreRange?: number[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (scoreRange != null) { params.push(`scoreRange=${scoreRange}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-type`, ...params);\n  }\n\n  /**\n   * Find device distribution by status filtered by query\n   */\n  countByStatus(streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: SeverityTypeCode[], scoreRange?: number[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (scoreRange != null) { params.push(`scoreRange=${scoreRange}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-status`, ...params);\n  }\n\n  /**\n   * Find device distribution by action filtered by query\n   */\n  countByAction(streamId?: string, search?: string, type?: DeviceTypeCode[], status?: DeviceStatusCode[], risk?: SeverityTypeCode[], scoreRange?: number[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (risk != null) { params.push(`risk=${risk}`); }\n    if (scoreRange != null) { params.push(`scoreRange=${scoreRange}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-action`, ...params);\n  }\n\n  /**\n   * Add tag to a device\n   */\n  addTag(id?: string, tag?: string) {\n    return this.rest.post<EntityResponse<Device>>(`${this.baseUrl}/${id}/tags/${tag}`, '');\n  }\n\n  /**\n   * Delete a tag from the device\n   */\n  deleteTag(id?: string, tag?: string) {\n    return this.rest.delete<EntityResponse<Device>>(`${this.baseUrl}/${id}/tags/${tag}`);\n  }\n\n  /**\n   * Apply action on a device\n   */\n  applyAction(id?: string, action?: DeviceActionCode) {\n    return this.rest.post<ActionResponse>(`${this.baseUrl}/${id}/actions/${action}`, '');\n  }\n\n  /**\n   * Get network map of devices\n   */\n  getNetworkMap(streamId?: string, from?: number, to?: number, type?: DeviceTypeCode[], tag?: string[], id?: string[], mapType?: NetworkMapTypeCode, ips?: string[]) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (tag != null) { params.push(`tag=${tag}`); }\n    if (id != null) { params.push(`id=${id}`); }\n    if (mapType != null) { params.push(`mapType=${mapType}`); }\n    if (ips != null) { params.push(`ips=${ips}`); }\n\n\t\treturn this.rest.get<EntityResponse<NetworkMap>>(`${this.baseUrl}/network-map`, ...params);\n  }\n\n  /**\n   * Get daily device report over time (daily device report includes: total devices, active devices, devices at risk)\n   */\n  getDeviceReportTimeline(streamId?: string, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get<EntityResponse<TimeSeriesOfDeviceReport>>(`${this.baseUrl}/report/timeline`, ...params);\n  }\n\n  /**\n   * Get latest device report, the Key contains latest devices at risk number (works in account level)\n   */\n  getLatestDeviceReport() {\n    return this.rest.get<EntityResponse<DeviceReport>>(`${this.baseUrl}/report/latest`);\n  }\n\n  /**\n   * Get device / group of devices consumption over time\n   */\n  getConsumptionTimeline(streamId?: string, from?: number, to?: number, type?: DeviceTypeCode[], tag?: string[], id?: string[]) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (tag != null) { params.push(`tag=${tag}`); }\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get<EntityResponse<TimeSeriesOfDataConsumption>>(`${this.baseUrl}/consumption/timeline`, ...params);\n  }\n\n  /**\n   * Get device / group of devices consumption over time\n   */\n  getConsumptionTrend(streamId?: string, from?: number, to?: number, type?: DeviceTypeCode[], tag?: string[], id?: string[]) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (tag != null) { params.push(`tag=${tag}`); }\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get<ActionResponse>(`${this.baseUrl}/consumption/trend`, ...params);\n  }\n\n  /**\n   * Upload list of devices\n   */\n  uploadDevices(file: File, streamId?: string, ip?: number, iccid?: number, imsi?: number, msisdn?: number, imei?: number, name?: number, operator?: number, label?: number[], tag?: number[]) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (ip != null) { params.push(`ip=${ip}`); }\n    if (iccid != null) { params.push(`iccid=${iccid}`); }\n    if (imsi != null) { params.push(`imsi=${imsi}`); }\n    if (msisdn != null) { params.push(`msisdn=${msisdn}`); }\n    if (imei != null) { params.push(`imei=${imei}`); }\n    if (name != null) { params.push(`name=${name}`); }\n    if (operator != null) { params.push(`operator=${operator}`); }\n    if (label != null) { params.push(`label=${label}`); }\n    if (tag != null) { params.push(`tag=${tag}`); }\n\n\t\treturn this.rest.upload(file,`${this.baseUrl}/upload`, ...params);\n  }\n\n  /**\n   * Find list of devices by Insight id query\n   */\n  findByInsightContext(streamId?: string, insightId?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (insightId != null) { params.push(`insightId=${insightId}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Device>>(`${this.baseUrl}/find-by-insight-context`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { MaliciousIPData } from '../common/MaliciousIPData';\nimport { IntDistribution } from '../entities/IntDistribution';\nimport { Event } from '../entities/Event';\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { EventWithDevice } from '../entities/EventWithDevice';\nimport { TimeSeriesOf2D } from '../common/TimeSeriesOf2D';\nimport { TimeSeriesOfFloat } from '../common/TimeSeriesOfFloat';\nimport { MaliciousIPCard } from '../common/MaliciousIPCard';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { EventCategoryCode } from '../enums/EventCategoryCode';\nimport { EventStatusCode } from '../enums/EventStatusCode';\n\n\n\n// List of events related actions for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UsrEventsService {\n\n  // URL to web api\n  private baseUrl = '/events';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single event by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Event>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of events by query\n   */\n  find(streamId?: string, deviceId?: string, alertId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (alertId != null) { params.push(`alertId=${alertId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Event>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Export list of events by query to a file with the specified format\n   */\n  exportFormat(format?: string, streamId?: string, deviceId?: string, alertId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (alertId != null) { params.push(`alertId=${alertId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.download(`usr-events`,`${this.baseUrl}/export/${format}`, ...params);\n  }\n\n  /**\n   * Find top 10 events by their severity filter by query\n   */\n  getTop(streamId?: string, deviceId?: string, alertId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (alertId != null) { params.push(`alertId=${alertId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<EventWithDevice>>(`${this.baseUrl}/top`, ...params);\n  }\n\n  /**\n   * Get top malicious IPs\n   */\n  getTopMaliciousIPs(streamId?: string, top?: number, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (top != null) { params.push(`top=${top}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<MaliciousIPData>>(`${this.baseUrl}/top-malicious-ips`, ...params);\n  }\n\n  /**\n   * Find events distribution by type filtered by query\n   */\n  countByType(streamId?: string, deviceId?: string, alertId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (alertId != null) { params.push(`alertId=${alertId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-type`, ...params);\n  }\n\n  /**\n   * Find events distribution by status filtered by query\n   */\n  countByStatus(streamId?: string, deviceId?: string, alertId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (alertId != null) { params.push(`alertId=${alertId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-status`, ...params);\n  }\n\n  /**\n   * Find events distribution by severity filtered by query\n   */\n  countBySeverity(streamId?: string, deviceId?: string, alertId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (alertId != null) { params.push(`alertId=${alertId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-severity`, ...params);\n  }\n\n  /**\n   * Find events distribution by rule filtered by query\n   */\n  countByRule(streamId?: string, deviceId?: string, alertId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (alertId != null) { params.push(`alertId=${alertId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-rule`, ...params);\n  }\n\n  /**\n   * Find events distribution by category filtered by query\n   */\n  countByCategory(streamId?: string, deviceId?: string, alertId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (alertId != null) { params.push(`alertId=${alertId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<IntDistribution>>(`${this.baseUrl}/count/by-category`, ...params);\n  }\n\n  /**\n   * Get current shieldex value as ActionResponse, the Key contains the shield index and the data includes the trend\n   */\n  getShieldex() {\n    return this.rest.get<ActionResponse>(`${this.baseUrl}/shieldex`);\n  }\n\n  /**\n   * Get histogram of events over time by dimension (type | severity | status | ruleType | category)\n   */\n  eventsTimeline(streamId?: string, deviceId?: string, alertId?: string, dimension?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (alertId != null) { params.push(`alertId=${alertId}`); }\n    if (dimension != null) { params.push(`dimension=${dimension}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntityResponse<TimeSeriesOf2D>>(`${this.baseUrl}/timeline`, ...params);\n  }\n\n  /**\n   * Get histogram of shieldex values over time\n   */\n  shieldexTimeline(streamId?: string, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get<EntityResponse<TimeSeriesOfFloat>>(`${this.baseUrl}/shieldex/timeline`, ...params);\n  }\n\n  /**\n   * Export event source file\n   */\n  exportSource(id?: string) {\n    return this.rest.download(`usr-events`,`${this.baseUrl}/${id}/export_source`);\n  }\n\n  /**\n   * Get total number devices at risk (affected by the events matching the query)\n   */\n  getTotalDevicesAtRisk(streamId?: string, search?: string, from?: number, to?: number, type?: EventTypeCode[], severity?: SeverityTypeCode[], category?: EventCategoryCode[], status?: EventStatusCode[], ruleId?: string[], targetIp?: string, ruleType?: RuleTypeCode[]) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (ruleId != null) { params.push(`ruleId=${ruleId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n\n\t\treturn this.rest.get<ActionResponse>(`${this.baseUrl}/devices-at-risk`, ...params);\n  }\n\n  /**\n   * Get malicious IP data card for specific malicious IP\n   */\n  getMaliciousIpCard(streamId?: string, targetIp?: string, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (targetIp != null) { params.push(`targetIp=${targetIp}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get<EntityResponse<MaliciousIPCard>>(`${this.baseUrl}/malicious-ip-card`, ...params);\n  }\n\n  /**\n   * Apply DNS lookup for each IP in the list\n   */\n  getIpLookup(ip?: string[]) {\n    const params = [];\t\t\n    if (ip != null) { params.push(`ip=${ip}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<StringKeyValue>>(`${this.baseUrl}/ip-lookup`, ...params);\n  }\n\n  /**\n   * Find list of events by insight id query\n   */\n  findByInsightContext() {\n    return this.rest.get<EntitiesResponse<Event>>(`${this.baseUrl}/find-by-insight-context`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { UsageRecord } from '../entities/UsageRecord';\nimport { SessionRecord } from '../entities/SessionRecord';\n\n\n\n// List of network statistics related queries for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UsrNetworkService {\n\n  // URL to web api\n  private baseUrl = '/network';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Find list of usage records by query\n   */\n  findUsage(streamId?: string, deviceId?: string, simId?: string, from?: number, to?: number, include?: number, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (simId != null) { params.push(`simId=${simId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (include != null) { params.push(`include=${include}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<UsageRecord>>(`${this.baseUrl}/usage`, ...params);\n  }\n\n  /**\n   * Find list of session records by query\n   */\n  findSession(streamId?: string, deviceId?: string, simId?: string, from?: number, to?: number, include?: number, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (deviceId != null) { params.push(`deviceId=${deviceId}`); }\n    if (simId != null) { params.push(`simId=${simId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (include != null) { params.push(`include=${include}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<SessionRecord>>(`${this.baseUrl}/session`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Report } from '../entities/Report';\nimport { TimeSeries } from '../common/TimeSeries';\nimport { GraphSeries } from '../common/GraphSeries';\n\n\n\n// List of events related actions for the operator \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UsrReportsService {\n\n  // URL to web api\n  private baseUrl = '/reports';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new report\n   */\n  create(body?: Report) {\n    return this.rest.put<EntityResponse<Report>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing report in the system\n   */\n  update(body?: Report) {\n    return this.rest.patch<EntityResponse<Report>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a report from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single report by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Report>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of reports by query\n   */\n  find(accountId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Report>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get compliance report\n   */\n  getComplianceReport(streamId?: string, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.download(`reports`,`${this.baseUrl}/compliance`, ...params);\n  }\n\n  /**\n   * Get histogram of network activity over time\n   */\n  getNetworkActivityOverTime(streamId?: string, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get<EntityResponse<TimeSeries>>(`${this.baseUrl}/network-activity-over-time`, ...params);\n  }\n\n  /**\n   * Get histogram of device distribution by number of destinations\n   */\n  getDeviceDistributionByNumberOfDestinations(streamId?: string, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get<EntityResponse<GraphSeries>>(`${this.baseUrl}/device-distribution-by-number-of-destinations`, ...params);\n  }\n\n  /**\n   * Get histogram of device distribution by communication frequency\n   */\n  getDeviceGroupsByCommunicationFrequency(streamId?: string, from?: number, to?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get<EntityResponse<GraphSeries>>(`${this.baseUrl}/device-groups-by-communication-frequency`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../../utils';\nimport { PulseConfig } from '../../config';\n\nimport { Rule } from '../entities/Rule';\nimport { TimeSeriesOfFloat } from '../common/TimeSeriesOfFloat';\n\n\n\n// List of rules related actions \n// @RequestHeader X-API-KEY The key to identify the application (console) \n// @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n@Injectable()\nexport class UsrRulesService {\n\n  // URL to web api\n  private baseUrl = '/rules';\n\n  // Class constructor\n  constructor(@Inject('config') private config: PulseConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new rule\n   */\n  create(body?: Rule) {\n    return this.rest.put<EntityResponse<Rule>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing rule in the system\n   */\n  update(body?: Rule) {\n    return this.rest.patch<EntityResponse<Rule>>(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete a rule from the system\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single rule by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Rule>>(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of rules by query\n   */\n  find(streamId?: string, search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (streamId != null) { params.push(`streamId=${streamId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Rule>>(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Analyze rule configuration against historic data\n   */\n  analyze(from?: number, to?: number, interval?: number, size?: number, body?: Rule) {\n    const params = [];\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (interval != null) { params.push(`interval=${interval}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.post<EntityResponse<TimeSeriesOfFloat>>(`${this.baseUrl}/analyze`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n}\n","import { SupportStreamAnalyticsConfig } from './supportStreamAnalyticsConfig';\nimport { SysAccountsService } from './sysAccountsService';\nimport { SysAuditLogService } from './sysAuditLogService';\nimport { SysCheckpointsService } from './sysCheckpointsService';\nimport { SysConfigService } from './sysConfigService';\nimport { SysFeaturesService } from './sysFeaturesService';\nimport { SysGroupsService } from './sysGroupsService';\nimport { SysInsightsService } from './sysInsightsService';\nimport { SysKeysService } from './sysKeysService';\nimport { SysMembersService } from './sysMembersService';\nimport { SysRuleTemplatesService } from './sysRuleTemplatesService';\nimport { SysRulesService } from './sysRulesService';\nimport { SysStatisticsService } from './sysStatisticsService';\nimport { SysStreamsService } from './sysStreamsService';\nimport { SysUsersService } from './sysUsersService';\nimport { UsrInsightsService } from './usrInsightsService';\nimport { UsrIntegrationsService } from './usrIntegrationsService';\nimport { UsrMembersService } from './usrMembersService';\nimport { UsrUserService } from './usrUserService';\nimport { UsrAlertsService } from './usrAlertsService';\nimport { UsrDevicesService } from './usrDevicesService';\nimport { UsrEventsService } from './usrEventsService';\nimport { UsrNetworkService } from './usrNetworkService';\nimport { UsrReportsService } from './usrReportsService';\nimport { UsrRulesService } from './usrRulesService';\n\nexport const Services = [\n    SupportStreamAnalyticsConfig,\n    SysAccountsService,\n    SysAuditLogService,\n    SysCheckpointsService,\n    SysConfigService,\n    SysFeaturesService,\n    SysGroupsService,\n    SysInsightsService,\n    SysKeysService,\n    SysMembersService,\n    SysRuleTemplatesService,\n    SysRulesService,\n    SysStatisticsService,\n    SysStreamsService,\n    SysUsersService,\n    UsrInsightsService,\n    UsrIntegrationsService,\n    UsrMembersService,\n    UsrUserService,\n    UsrAlertsService,\n    UsrDevicesService,\n    UsrEventsService,\n    UsrNetworkService,\n    UsrReportsService,\n    UsrRulesService,\n    \n]","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { Services } from './lib/services/services.export';\nimport { RestUtil } from './utils/rest-util';\nimport { PulseConfig } from './config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule]\n})\nexport class NgxPulseLibModule {\n  static forRoot(config: PulseConfig): ModuleWithProviders<NgxPulseLibModule> {\n    return {\n      ngModule: NgxPulseLibModule,\n      providers: [\n        { provide: 'config', useValue: config },\n        RestUtil,\n        ...Services\n      ]\n    };\n  }\n}\n\n// @NgModule({\n//   imports: [CommonModule, HttpClientModule],\n//   providers: [RestUtil, RestUtil, ...Services]\n// })\n// export class NgxPulseLibModule { }\n","import { MemberRoleCode } from '../enums/MemberRoleCode';\n\n\n\n// Account role represents the role of the user in the account\nexport class AccountRole {\n \n    // Account Id \n    public accountId: string;\n \n    // Account Name (for display only) \n    public accountName: string;\n \n    // User role in the account: UNDEFINED | ADMIN | OPERATOR | VIEWER \n    public role: MemberRoleCode;\n \n     constructor(accountId?: string, accountName?: string, role?: MemberRoleCode) { \n        if (accountId !== undefined) { this.accountId = accountId; }\n        if (accountName !== undefined) { this.accountName = accountName; }\n        if (role !== undefined) { this.role = role; }\n    }\n\n}\n\n\n","\n\n\n// A set of input, output data values\nexport class ConsumptionData {\n \n    // Incoming traffic in Kb \n    public dataIn: number;\n \n    // Outgoing traffic in Kb \n    public dataOut: number;\n \n    // Total traffic in Kb \n    public total: number;\n \n     constructor(dataIn?: number, dataOut?: number, total?: number) { \n        if (dataIn !== undefined) { this.dataIn = dataIn; }\n        if (dataOut !== undefined) { this.dataOut = dataOut; }\n        if (total !== undefined) { this.total = total; }\n    }\n\n}\n\n\n","import { ConsumptionData } from '../common/ConsumptionData';\n\n\n\n// ConsumptionTimeDataPoint model represents a 2 dimensions datapoint in time\nexport class ConsumptionTimeDataPoint {\n \n    // Sata point timestamp [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Consumption data \n    public value: ConsumptionData;\n \n     constructor(timestamp?: number, value?: ConsumptionData) { \n        if (timestamp !== undefined) { this.timestamp = timestamp; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","import { DevicesAtRiskConfig } from '../common/DevicesAtRiskConfig';\nimport { DeviceScoreConfig } from '../common/DeviceScoreConfig';\n\n\n\n// DeviceConfig is a set of device related configurations\nexport class DeviceConfig {\n \n    // Devices at risk configuration \n    public devicesAtRiskConfig: DevicesAtRiskConfig;\n \n    // Device score configurations \n    public deviceScoreConfig: DeviceScoreConfig;\n \n     constructor(devicesAtRiskConfig?: DevicesAtRiskConfig, deviceScoreConfig?: DeviceScoreConfig) { \n        if (devicesAtRiskConfig !== undefined) { this.devicesAtRiskConfig = devicesAtRiskConfig; }\n        if (deviceScoreConfig !== undefined) { this.deviceScoreConfig = deviceScoreConfig; }\n    }\n\n}\n\n\n","\n\n\n// DeviceScoreConfig is a set of parameters for device score config\nexport class DeviceScoreConfig {\n \n    // device score alpha factor \n    public deviceScoreAlphaFactor: number;\n \n    // occurrence threshold \n    public occurrenceThreshold: number;\n \n    // ruleCount threshold \n    public ruleCountThreshold: number;\n \n     constructor(deviceScoreAlphaFactor?: number, occurrenceThreshold?: number, ruleCountThreshold?: number) { \n        if (deviceScoreAlphaFactor !== undefined) { this.deviceScoreAlphaFactor = deviceScoreAlphaFactor; }\n        if (occurrenceThreshold !== undefined) { this.occurrenceThreshold = occurrenceThreshold; }\n        if (ruleCountThreshold !== undefined) { this.ruleCountThreshold = ruleCountThreshold; }\n    }\n\n}\n\n\n","\n\n\n// DevicesAtRiskConfig is int of minimal score for device to be at risk\nexport class DevicesAtRiskConfig {\n \n    // Minimal score for device to be at risk \n    public minScore: number;\n \n     constructor(minScore?: number) { \n        if (minScore !== undefined) { this.minScore = minScore; }\n    }\n\n}\n\n\n","import { SeverityIntervalTuple } from '../common/SeverityIntervalTuple';\n\n\n\n// EventSeverityConfig is a list of event severity configuration\nexport class EventSeverityConfig {\n \n    // List of severity configurations key-value. Value of type Interval \n    public severityConfigs: SeverityIntervalTuple[];\n \n     constructor(severityConfigs?: SeverityIntervalTuple[]) { \n        if (severityConfigs !== undefined) { this.severityConfigs = severityConfigs; }\n    }\n\n}\n\n\n","\n\n\n// Key Value float tuple\nexport class FloatKeyValue {\n \n    // Key of tuple \n    public key: number;\n \n    // Value of tuple \n    public value: number;\n \n     constructor(key?: number, value?: number) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","import { Location } from '../common/Location';\n\n\n\n// GeoData model represents Geographic data associated with IP\n// This structure is based on the Elasticsearch GeoIP pipeline fetching data from MaxMind database\nexport class GeoData {\n \n    // Country ISO code \n    public country_iso_code: string;\n \n    // Country name \n    public country_name: string;\n \n    // Region ISO code \n    public region_iso_code: string;\n \n    // Region name \n    public region_name: string;\n \n    // City name \n    public city_name: string;\n \n    // WGS-84 Geo Location \n    public location: Location;\n \n     constructor(countryIsoCode?: string, countryName?: string, regionIsoCode?: string, regionName?: string, cityName?: string, location?: Location) { \n        if (countryIsoCode !== undefined) { this.country_iso_code = countryIsoCode; }\n        if (countryName !== undefined) { this.country_name = countryName; }\n        if (regionIsoCode !== undefined) { this.region_iso_code = regionIsoCode; }\n        if (regionName !== undefined) { this.region_name = regionName; }\n        if (cityName !== undefined) { this.city_name = cityName; }\n        if (location !== undefined) { this.location = location; }\n    }\n\n}\n\n\n","import { IntKeySeriesDataValue } from '../common/IntKeySeriesDataValue';\n\n\n\n// GraphSeries model represents a generic set of data points over interval\nexport class GraphSeries {\n \n    // Name of the graph series \n    public name: string;\n \n    // Custom attributes (key-value pairs) \n    public values: IntKeySeriesDataValue[];\n \n     constructor(name?: string, values?: IntKeySeriesDataValue[]) { \n        if (name !== undefined) { this.name = name; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","\n\n\n// Indicator model represents a feature and feature value within a normal range\nexport class Indicator {\n \n    // Feature name \n    public name: string;\n \n    // Level of Significance \n    public significance: number;\n \n    // Min normal value \n    public min: number;\n \n    // Max normal value \n    public max: number;\n \n    // Actual value of the feature \n    public actual: number;\n \n     constructor(name?: string, significance?: number, min?: number, max?: number, actual?: number) { \n        if (name !== undefined) { this.name = name; }\n        if (significance !== undefined) { this.significance = significance; }\n        if (min !== undefined) { this.min = min; }\n        if (max !== undefined) { this.max = max; }\n        if (actual !== undefined) { this.actual = actual; }\n    }\n\n}\n\n\n","import { SeriesData } from '../common/SeriesData';\n\n\n\n// Key: int Value SeriesData  tuple\nexport class IntKeySeriesDataValue {\n \n    // Key of tuple \n    public key: number;\n \n    // Value of tuple \n    public value: SeriesData;\n \n     constructor(key?: number, value?: SeriesData) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// Key Value int tuple\nexport class IntKeyValue {\n \n    // Key of tuple \n    public key: number;\n \n    // Value of tuple \n    public value: number;\n \n     constructor(key?: number, value?: number) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// Interval represents a finite int window (from - to)\nexport class Interval {\n \n    // Start window interval \n    public from: number;\n \n    // End window interval \n    public to: number;\n \n     constructor(from?: number, to?: number) { \n        if (from !== undefined) { this.from = from; }\n        if (to !== undefined) { this.to = to; }\n    }\n\n}\n\n\n","import { SeverityTypeCode } from '../enums/SeverityTypeCode';\n\n\n\n// Link represents a relation between two nodes\nexport class Link {\n \n    // Link Id \n    public id: string;\n \n    // Link name \n    public name: string;\n \n    // Source Node Id (from) \n    public src: string;\n \n    // Destination Node Id (to) \n    public dst: string;\n \n    // Link numeric value \n    public value: number;\n \n    // Severity level: UNDEFINED | LOW | MEDIUM | HIGH | CRITICAL \n    public severity: SeverityTypeCode;\n \n    // Number of events for the time period (calculated field) \n    public eventCount: number;\n \n     constructor(id?: string, name?: string, src?: string, dst?: string, value?: number, severity?: SeverityTypeCode, eventCount?: number) { \n        if (id !== undefined) { this.id = id; }\n        if (name !== undefined) { this.name = name; }\n        if (src !== undefined) { this.src = src; }\n        if (dst !== undefined) { this.dst = dst; }\n        if (value !== undefined) { this.value = value; }\n        if (severity !== undefined) { this.severity = severity; }\n        if (eventCount !== undefined) { this.eventCount = eventCount; }\n    }\n\n}\n\n\n","\n\n\n// WGS-84 Geo Location\nexport class Location {\n \n    // Latitude \n    public lat: number;\n \n    // Longitude \n    public lon: number;\n \n     constructor(lat?: number, lon?: number) { \n        if (lat !== undefined) { this.lat = lat; }\n        if (lon !== undefined) { this.lon = lon; }\n    }\n\n}\n\n\n","\n\n\n// Login parameters data model\nexport class LoginParams {\n \n    // User email \n    public email: string;\n \n    // User password \n    public password: string;\n \n    // Access token - in case of re-login with existing token \n    public accessToken: string;\n \n     constructor(email?: string, password?: string, accessToken?: string) { \n        if (email !== undefined) { this.email = email; }\n        if (password !== undefined) { this.password = password; }\n        if (accessToken !== undefined) { this.accessToken = accessToken; }\n    }\n\n}\n\n\n","import { IntDistribution } from '../entities/IntDistribution';\n\n\n\n// MaliciousIPCard is a data structure representing malicious IP card\nexport class MaliciousIPCard {\n \n    // The malicious IP \n    public maliciousIp: string;\n \n    // The malicious IP DNS name (can be comma-separated list of names) \n    public maliciousIpDns: string;\n \n    // Country code \n    public countryCode: string;\n \n    // Ip description \n    public ipDescription: string;\n \n    // Last Event Time \n    public lastEventTime: number;\n \n    // Attack Categories list \n    public attackCategories: string[];\n \n    // Number Of Devices \n    public numberOfDevices: number;\n \n    // Events By Severity Breakdown \n    public eventsBySeverityBreakdown: IntDistribution;\n \n     constructor(maliciousIp?: string, maliciousIpDns?: string, countryCode?: string, ipDescription?: string, lastEventTime?: number, attackCategories?: string[], numberOfDevices?: number, eventsBySeverityBreakdown?: IntDistribution) { \n        if (maliciousIp !== undefined) { this.maliciousIp = maliciousIp; }\n        if (maliciousIpDns !== undefined) { this.maliciousIpDns = maliciousIpDns; }\n        if (countryCode !== undefined) { this.countryCode = countryCode; }\n        if (ipDescription !== undefined) { this.ipDescription = ipDescription; }\n        if (lastEventTime !== undefined) { this.lastEventTime = lastEventTime; }\n        if (attackCategories !== undefined) { this.attackCategories = attackCategories; }\n        if (numberOfDevices !== undefined) { this.numberOfDevices = numberOfDevices; }\n        if (eventsBySeverityBreakdown !== undefined) { this.eventsBySeverityBreakdown = eventsBySeverityBreakdown; }\n    }\n\n}\n\n\n","\n\n\n// MaliciousIPData is a data structure representing malicious IP and its statistics\nexport class MaliciousIPData {\n \n    // The malicious IP \n    public ip: string;\n \n    // Total related events \n    public totalEvents: number;\n \n    // Total related devices \n    public totalDevices: number;\n \n    // Total suspicious IPs \n    public totalMaliciousIPs: number;\n \n     constructor(iP?: string, totalEvents?: number, totalDevices?: number, totalMaliciousIPs?: number) { \n        if (iP !== undefined) { this.ip = iP; }\n        if (totalEvents !== undefined) { this.totalEvents = totalEvents; }\n        if (totalDevices !== undefined) { this.totalDevices = totalDevices; }\n        if (totalMaliciousIPs !== undefined) { this.totalMaliciousIPs = totalMaliciousIPs; }\n    }\n\n}\n\n\n","import { Node } from '../common/Node';\nimport { Link } from '../common/Link';\n\n\n\n// NetworkMap is a data structure representing a set of nodes and vertex representing a network\nexport class NetworkMap {\n \n    // List of nodes \n    public nodes: Node[];\n \n    // List of links \n    public links: Link[];\n \n     constructor(nodes?: Node[], links?: Link[]) { \n        if (nodes !== undefined) { this.nodes = nodes; }\n        if (links !== undefined) { this.links = links; }\n    }\n\n}\n\n\n","import { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { StringKeyValue } from '../common/StringKeyValue';\n\n\n\n// Node represents a vertex in a network map\nexport class Node {\n \n    // Node Id \n    public id: string;\n \n    // Node name \n    public name: string;\n \n    // Node IP \n    public ip: string;\n \n    // Device type (for nodes representing a device) \n    public type: DeviceTypeCode;\n \n    // Device current security score \n    public score: number;\n \n    // List of device tags \n    public tags: string[];\n \n    // Custom attributes (key-value pairs) \n    public labels: StringKeyValue[];\n \n    // Number of events for the time period (calculated field) \n    public eventCount: number;\n \n    // Is aggregated node \n    public isGroup: boolean;\n \n    // \n    public deviceCount: number;\n \n     constructor(id?: string, name?: string, ip?: string, type?: DeviceTypeCode, score?: number, tags?: string[], labels?: StringKeyValue[], eventCount?: number, isGroup?: boolean, deviceCount?: number) { \n        if (id !== undefined) { this.id = id; }\n        if (name !== undefined) { this.name = name; }\n        if (ip !== undefined) { this.ip = ip; }\n        if (type !== undefined) { this.type = type; }\n        if (score !== undefined) { this.score = score; }\n        if (tags !== undefined) { this.tags = tags; }\n        if (labels !== undefined) { this.labels = labels; }\n        if (eventCount !== undefined) { this.eventCount = eventCount; }\n        if (isGroup !== undefined) { this.isGroup = isGroup; }\n        if (deviceCount !== undefined) { this.deviceCount = deviceCount; }\n    }\n\n}\n\n\n","import { Interval } from '../common/Interval';\nimport { StringKeyIntValue } from '../common/StringKeyIntValue';\n\n\n\n// SeriesData model represents a generic datapoint in interval range\nexport class SeriesData {\n \n    // Data interval \n    public interval: Interval;\n \n    // Custom attributes (key-value pairs) \n    public values: StringKeyIntValue[];\n \n     constructor(interval?: Interval, values?: StringKeyIntValue[]) { \n        if (interval !== undefined) { this.interval = interval; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { ZScore } from '../common/ZScore';\n\n\n\n// Session data transformation parameters (to calculate z-score)\nexport class SessionTransform {\n \n    // ZScore parameters for incoming packets (to the device) \n    public packetsIn: ZScore;\n \n    // ZScore parameters for outgoing packets (from the device) \n    public packetsOut: ZScore;\n \n    // ZScore parameters for total number of incoming bytes (to the device) \n    public bytesIn: ZScore;\n \n    // ZScore parameters for total number of outgoing bytes (from the device) \n    public bytesOut: ZScore;\n \n     constructor(packetsIn?: ZScore, packetsOut?: ZScore, bytesIn?: ZScore, bytesOut?: ZScore) { \n        if (packetsIn !== undefined) { this.packetsIn = packetsIn; }\n        if (packetsOut !== undefined) { this.packetsOut = packetsOut; }\n        if (bytesIn !== undefined) { this.bytesIn = bytesIn; }\n        if (bytesOut !== undefined) { this.bytesOut = bytesOut; }\n    }\n\n}\n\n\n","import { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { Interval } from '../common/Interval';\n\n\n\n// SeverityIntervalTuple  is tuple of SeverityTypeCode and Interval\nexport class SeverityIntervalTuple {\n \n    // Event severity type code \n    public severity: SeverityTypeCode;\n \n    // Severity interval from-to \n    public interval: Interval;\n \n     constructor(severity?: SeverityTypeCode, interval?: Interval) { \n        if (severity !== undefined) { this.severity = severity; }\n        if (interval !== undefined) { this.interval = interval; }\n    }\n\n}\n\n\n","\n\n\n// ShieldexConfig is a shieldex configuration values for the Risk calculation\nexport class ShieldexConfig {\n \n    // Deprecated: Alpha weight factor for shieldex calculation \n    public alphaWeightFactor: number;\n \n    // Deprecated: Percent factor for shieldex calculation \n    public percentFactor: number;\n \n    // Low risk devices weight \n    public lowRiskWeight: number;\n \n    // Medium risk devices weight \n    public mediumRiskWeight: number;\n \n    // High risk devices weight \n    public highRiskWeight: number;\n \n    // Critical risk devices weight \n    public criticalRiskWeight: number;\n \n     constructor(alphaWeightFactor?: number, percentFactor?: number, lowRiskWeight?: number, mediumRiskWeight?: number, highRiskWeight?: number, criticalRiskWeight?: number) { \n        if (alphaWeightFactor !== undefined) { this.alphaWeightFactor = alphaWeightFactor; }\n        if (percentFactor !== undefined) { this.percentFactor = percentFactor; }\n        if (lowRiskWeight !== undefined) { this.lowRiskWeight = lowRiskWeight; }\n        if (mediumRiskWeight !== undefined) { this.mediumRiskWeight = mediumRiskWeight; }\n        if (highRiskWeight !== undefined) { this.highRiskWeight = highRiskWeight; }\n        if (criticalRiskWeight !== undefined) { this.criticalRiskWeight = criticalRiskWeight; }\n    }\n\n}\n\n\n","\n\n\n// String Int Value tuple\nexport class StringIntValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Value of tuple \n    public value: number;\n \n     constructor(key?: string, value?: number) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// Key Value string  to int tuple\nexport class StringKeyIntValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Value of tuple \n    public value: number;\n \n     constructor(key?: string, value?: number) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// Key Value string tuple\nexport class StringKeyValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Value of tuple \n    public value: string;\n \n     constructor(key?: string, value?: string) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// Thresholds is a list of stream configuration thresholds\nexport class Thresholds {\n \n    // Total time (in minutes) from the last device activity to change the device status to INACTIVE \n    public inactiveDeviceWindowMin: number;\n \n     constructor(inactiveDeviceWindowMin?: number) { \n        if (inactiveDeviceWindowMin !== undefined) { this.inactiveDeviceWindowMin = inactiveDeviceWindowMin; }\n    }\n\n}\n\n\n","\n\n\n// TimeDataPoint model represents a generic datapoint in time\nexport class TimeDataPoint {\n \n    // Sata point timestamp [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Generic value \n    public value: any;\n \n     constructor(timestamp?: number, value?: any) { \n        if (timestamp !== undefined) { this.timestamp = timestamp; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","import { FloatKeyValue } from '../common/FloatKeyValue';\n\n\n\n// TimeDataPoint2D model represents a 2 dimensions datapoint in time\nexport class TimeDataPoint2D {\n \n    // Sata point timestamp [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Float value \n    public value: FloatKeyValue[];\n \n     constructor(timestamp?: number, value?: FloatKeyValue[]) { \n        if (timestamp !== undefined) { this.timestamp = timestamp; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// TimeDataPointFloat model represents a float datapoint in time\nexport class TimeDataPointFloat {\n \n    // Sata point timestamp [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Float value \n    public value: number;\n \n     constructor(timestamp?: number, value?: number) { \n        if (timestamp !== undefined) { this.timestamp = timestamp; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","\n\n\n// TimeFrame represents a finite time window (from - to)\nexport class TimeFrame {\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public to: number;\n \n     constructor(from?: number, to?: number) { \n        if (from !== undefined) { this.from = from; }\n        if (to !== undefined) { this.to = to; }\n    }\n\n}\n\n\n","import { TimeFrame } from '../common/TimeFrame';\nimport { TimeDataPoint } from '../common/TimeDataPoint';\n\n\n\n// TimeSeries model represents a generic set of data points over time\nexport class TimeSeries {\n \n    // Name of the time series \n    public name: string;\n \n    // Range of the series (from ... to) \n    public range: TimeFrame;\n \n    // Series of generic data points \n    public values: TimeDataPoint[];\n \n     constructor(name?: string, range?: TimeFrame, values?: TimeDataPoint[]) { \n        if (name !== undefined) { this.name = name; }\n        if (range !== undefined) { this.range = range; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { TimeFrame } from '../common/TimeFrame';\nimport { TimeDataPoint2D } from '../common/TimeDataPoint2D';\n\n\n\n// TimeSeriesOf2D model represents a 2 dimension samples over time\nexport class TimeSeriesOf2D {\n \n    // Name of the time series \n    public name: string;\n \n    // Range of the series (from ... to) \n    public range: TimeFrame;\n \n    // Series of float data points \n    public values: TimeDataPoint2D[];\n \n     constructor(name?: string, range?: TimeFrame, values?: TimeDataPoint2D[]) { \n        if (name !== undefined) { this.name = name; }\n        if (range !== undefined) { this.range = range; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { TimeFrame } from '../common/TimeFrame';\nimport { ConsumptionTimeDataPoint } from '../common/ConsumptionTimeDataPoint';\n\n\n\n// TimeSeriesOfDataConsumption model represents a data consumption (in, out, total Kb) samples over time\nexport class TimeSeriesOfDataConsumption {\n \n    // Name of the time series \n    public name: string;\n \n    // Range of the series (from ... to) \n    public range: TimeFrame;\n \n    // Series of consumption data points \n    public values: ConsumptionTimeDataPoint[];\n \n     constructor(name?: string, range?: TimeFrame, values?: ConsumptionTimeDataPoint[]) { \n        if (name !== undefined) { this.name = name; }\n        if (range !== undefined) { this.range = range; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { TimeDataPointFloat } from '../common/TimeDataPointFloat';\nimport { TimeFrame } from '../common/TimeFrame';\n\n\n\n// TimeSeriesOfFloat model represents a float set of data points over time\nexport class TimeSeriesOfFloat {\n \n    // Name of the time series \n    public name: string;\n \n    // Range of the series (from ... to) \n    public range: TimeFrame;\n \n    // Series of float data points \n    public values: TimeDataPointFloat[];\n \n     constructor(name?: string, range?: TimeFrame, values?: TimeDataPointFloat[]) { \n        if (name !== undefined) { this.name = name; }\n        if (range !== undefined) { this.range = range; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { MemberRoleCode } from '../enums/MemberRoleCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { UserTypeCode } from '../enums/UserTypeCode';\n\n\n\n// TokenData model represents a user in account which is encrypted with the JWT token\nexport class TokenData {\n \n    // Account ID \n    public accountId: string;\n \n    // Authenticated subject ID (can be user, or service account) \n    public subjectId: string;\n \n    // Subject type: UNDEFINED | SYSADMIN | USER | SERVICE_ACCOUNT \n    public subjectType: UserTypeCode;\n \n    // Role of user in the account: UNDEFINED | ADMIN | USER \n    public role: MemberRoleCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Token expiration [Epoch milliseconds Timestamp] \n    public expiresIn: number;\n \n     constructor(accountId?: string, subjectId?: string, subjectType?: UserTypeCode, role?: MemberRoleCode, status?: UserStatusCode, expiresIn?: number) { \n        if (accountId !== undefined) { this.accountId = accountId; }\n        if (subjectId !== undefined) { this.subjectId = subjectId; }\n        if (subjectType !== undefined) { this.subjectType = subjectType; }\n        if (role !== undefined) { this.role = role; }\n        if (status !== undefined) { this.status = status; }\n        if (expiresIn !== undefined) { this.expiresIn = expiresIn; }\n    }\n\n}\n\n\n","\n\n\n// Tuple model represents a generic key-value pair\nexport class Tuple {\n \n    // Generic key \n    public key: any;\n \n    // Generic value \n    public value: any;\n \n     constructor(key?: any, value?: any) { \n        if (key !== undefined) { this.key = key; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","import { ZScore } from '../common/ZScore';\n\n\n\n// Usage data transformation parameters (to calculate z-score)\nexport class UsageTransform {\n \n    // ZScore parameters for incoming packets (to the device) \n    public packetsIn: ZScore;\n \n    // ZScore parameters for outgoing packets (from the device) \n    public packetsOut: ZScore;\n \n    // ZScore parameters for total number of incoming bytes (to the device) \n    public bytesIn: ZScore;\n \n    // ZScore parameters for total number of outgoing bytes (from the device) \n    public bytesOut: ZScore;\n \n    // ZScore parameters for total number of destination endpoints \n    public endpointsCount: ZScore;\n \n    // ZScore parameters for total number of destination ports \n    public portsCount: ZScore;\n \n     constructor(packetsIn?: ZScore, packetsOut?: ZScore, bytesIn?: ZScore, bytesOut?: ZScore, endpointsCount?: ZScore, portsCount?: ZScore) { \n        if (packetsIn !== undefined) { this.packetsIn = packetsIn; }\n        if (packetsOut !== undefined) { this.packetsOut = packetsOut; }\n        if (bytesIn !== undefined) { this.bytesIn = bytesIn; }\n        if (bytesOut !== undefined) { this.bytesOut = bytesOut; }\n        if (endpointsCount !== undefined) { this.endpointsCount = endpointsCount; }\n        if (portsCount !== undefined) { this.portsCount = portsCount; }\n    }\n\n}\n\n\n","\n\n\n// ZScore parameters\nexport class ZScore {\n \n    // Mean value \n    public mean: number;\n \n    // Standard Deviation \n    public sD: number;\n \n     constructor(mean?: number, sD?: number) { \n        if (mean !== undefined) { this.mean = mean; }\n        if (sD !== undefined) { this.sD = sD; }\n    }\n\n}\n\n\n","\n\n\n// Base entity includes common fields for all entities (persistence objects) in the system\nexport class BaseEntity {\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n     constructor(id?: string, createdOn?: number, updatedOn?: number) { \n        if (id !== undefined) { this.id = id; }\n        if (createdOn !== undefined) { this.createdOn = createdOn; }\n        if (updatedOn !== undefined) { this.updatedOn = updatedOn; }\n    }\n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { AccountSettings } from '../entities/AccountSettings';\n\n\n\n// Account entity in the system represents customer account\nexport class Account extends BaseEntity {\n \n    // Account name \n    public name: string;\n \n    // The account identity in the external system (e.g. Billing, CRM etc) @json:externalId\"` \n    public externalId: string;\n \n    // Account description \n    public description: string;\n \n    // Account Type: UNDEFINED | DEMO | TRIAL | PARTNER | CUSTOMER \n    public type: AccountTypeCode;\n \n    // Account status: UNDEFINED | ACTIVE | SUSPENDED \n    public status: AccountStatusCode;\n \n    // List of associated account groups (for feature toggle) \n    public groups: string[];\n \n    // When the account will be expired [Epoch milliseconds Timestamp] (0 means no expiration time) \n    public expiredOn: number;\n \n    // Additional user defined tags \n    public tags: string[];\n \n    // List of custom attributes (key-value pairs) \n    public labels: StringKeyValue[];\n \n    // Account specific attributes \n    public settings: AccountSettings;\n \n \n}\n\n\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { FeatureCode } from '../enums/FeatureCode';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { AccountSettings } from '../entities/AccountSettings';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// AccountDTO includes additional data for display\nexport class AccountDTO extends BaseEntity {\n \n    // Account name \n    public name: string;\n \n    // The account identity in the external system (e.g. Billing, CRM etc) @json:externalId\"` \n    public externalId: string;\n \n    // Account description \n    public description: string;\n \n    // Account Type: UNDEFINED | DEMO | TRIAL | PARTNER | CUSTOMER \n    public type: AccountTypeCode;\n \n    // Account status: UNDEFINED | ACTIVE | SUSPENDED \n    public status: AccountStatusCode;\n \n    // List of associated account groups (for feature toggle) \n    public groups: string[];\n \n    // List of all features from all the groups \n    public features: FeatureCode[];\n \n    // When the account will be expired [Epoch milliseconds Timestamp] (0 means no expiration time) \n    public expiredOn: number;\n \n    // Additional user defined tags \n    public tags: string[];\n \n    // List of custom attributes (key-value pairs) \n    public labels: StringKeyValue[];\n \n    // Account specific attributes \n    public settings: AccountSettings;\n \n \n}\n\n\n","import { HomePageViewCode } from '../enums/HomePageViewCode';\nimport { ComplianceReportSettings } from '../entities/ComplianceReportSettings';\nimport { TeaserPopUpSettings } from '../entities/TeaserPopUpSettings';\n\n\n\n// AccountSettings is a set of account attributes\nexport class AccountSettings {\n \n    // Account logo URL (starts with http) or embedded image (base64) \n    public logo: string;\n \n    // Default home page view \n    public defaultHomePageView: HomePageViewCode;\n \n    // ComplianceReportSettings specific attributes \n    public complianceReportSettings: ComplianceReportSettings;\n \n    // Teaser pop up settings attributes \n    public teaserPopUpSettings: TeaserPopUpSettings;\n \n     constructor(logo?: string, defaultHomePageView?: HomePageViewCode, complianceReportSettings?: ComplianceReportSettings, teaserPopUpSettings?: TeaserPopUpSettings) { \n        if (logo !== undefined) { this.logo = logo; }\n        if (defaultHomePageView !== undefined) { this.defaultHomePageView = defaultHomePageView; }\n        if (complianceReportSettings !== undefined) { this.complianceReportSettings = complianceReportSettings; }\n        if (teaserPopUpSettings !== undefined) { this.teaserPopUpSettings = teaserPopUpSettings; }\n    }\n\n}\n\n\n","import { DeviceActionCode } from '../enums/DeviceActionCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Action entity is a user action applied on an event or device\nexport class Action extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Event Id (in case action was applied on an event) \n    public eventId: string;\n \n    // Device Id (in case action was applied on a device) \n    public deviceId: string;\n \n    // Action type: UNDEFINED | REDIRECT | SUSPEND | BLOCK_IP ... \n    public action: DeviceActionCode;\n \n    // User id who applied the action \n    public userId: string;\n \n \n}\n\n\n","import { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { TrafficDirectionCode } from '../enums/TrafficDirectionCode';\nimport { EventStatusCode } from '../enums/EventStatusCode';\nimport { GeoData } from '../common/GeoData';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { EventCategoryCode } from '../enums/EventCategoryCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Cyber event entity\n// The Event entity is created by multiple services (e.g. ip reputation, static rules, anomaly detection) by analyzing network statistics (usage and session data) and related to specific IP address.\n// Since it is not always clear what is the actual device with the IP address (RADIUS or DIAMETER logs can be provided later), we should be able to create event without device Id and assign the device Id later on.\n// For this purpose, when the device Id is not provided, the event will be created with the `unknown` value in the deviceId field and the eventId must follow the following pattern: streamId:timestamp:ip_address\nexport class Alert extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Event type: UNDEFINED | DDOS | PORT_SCANNING | DEVICE_TAKEOVER ... \n    public type: EventTypeCode;\n \n    // Event severity level: UNDEFINED | LOW | MEDIUM | HIGH | CRITICAL \n    public severity: SeverityTypeCode;\n \n    // Event current security score \n    public score: number;\n \n    // Probability score by IP reputation engine \n    public probability: number;\n \n    // Event workflow status: UNDEFINED | NEW | OPEN ... \n    public status: EventStatusCode;\n \n    // Rule type: UNDEFINED | SUSPICIOUS_IP | STATIC | ANOMALY \n    public ruleType: RuleTypeCode;\n \n    // Static Rule id (in case of SUSPICIOUS_IP, it should be the IP value) \n    public ruleId: string;\n \n    // The allocated IP for the device at the time of the event occurrence \n    public sourceIp: string;\n \n    // Target IP address for some of the events (e.g. suspicious IP) \n    public targetIp: string;\n \n    // GeoIP information based on MaxMind database \n    public targetLocation: GeoData;\n \n    // Event description \n    public description: string;\n \n    // Additional Event tags \n    public tags: string[];\n \n    // List of custom attributes (key-value pairs) \n    public labels: StringKeyValue[];\n \n    // Event category \n    public category: EventCategoryCode;\n \n    // Recommended action description to apply on the device \n    public recommendedAction: string;\n \n    // Denotes network traffic direction: UNDEFINED | INBOUND | OUTBOUND \n    public trafficDirection: TrafficDirectionCode;\n \n    // Contains confidence score of malicious IP detection. Value range: 0-100 \n    public confidenceScore: number;\n \n    // Event occurrences count \n    public occurrencesCount: boolean;\n \n \n}\n\n\n","import { EventStatusCode } from '../enums/EventStatusCode';\nimport { EventCategoryCode } from '../enums/EventCategoryCode';\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { GeoData } from '../common/GeoData';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { TrafficDirectionCode } from '../enums/TrafficDirectionCode';\nimport { Device } from '../entities/Device';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// AlertWithDevice entity is an event with the device information (for display only)\nexport class AlertWithDevice extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Event type: UNDEFINED | DDOS | PORT_SCANNING | DEVICE_TAKEOVER ... \n    public type: EventTypeCode;\n \n    // Event severity level: UNDEFINED | LOW | MEDIUM | HIGH | CRITICAL \n    public severity: SeverityTypeCode;\n \n    // Event current security score \n    public score: number;\n \n    // Probability score by IP reputation engine \n    public probability: number;\n \n    // Event workflow status: UNDEFINED | NEW | OPEN ... \n    public status: EventStatusCode;\n \n    // Rule type: UNDEFINED | SUSPICIOUS_IP | STATIC | ANOMALY \n    public ruleType: RuleTypeCode;\n \n    // Static Rule id (in case of SUSPICIOUS_IP, it should be the IP value) \n    public ruleId: string;\n \n    // The allocated IP for the device at the time of the event occurrence \n    public sourceIp: string;\n \n    // Target IP address for some of the events (e.g. suspicious IP) \n    public targetIp: string;\n \n    // GeoIP information based on MaxMind database \n    public targetLocation: GeoData;\n \n    // Event description \n    public description: string;\n \n    // Additional Event tags \n    public tags: string[];\n \n    // List of custom attributes (key-value pairs) \n    public labels: StringKeyValue[];\n \n    // Event category \n    public category: EventCategoryCode;\n \n    // Recommended action description to apply on the device \n    public recommendedAction: string;\n \n    // Denotes network traffic direction: UNDEFINED | INBOUND | OUTBOUND \n    public trafficDirection: TrafficDirectionCode;\n \n    // Contains confidence score of malicious IP detection. Value range: 0-100 \n    public confidenceScore: number;\n \n    // Event occurrences count \n    public occurrencesCount: boolean;\n \n    // Device attached to the event \n    public device: Device;\n \n \n}\n\n\n","import { StringKeyIntValue } from '../common/StringKeyIntValue';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// ApiKey entity is a structure representing the source data fields encapsulated in the API key\nexport class ApiKey extends BaseEntity {\n \n    // API Key name \n    public name: string;\n \n    // Default session token expiration TTL (in minutes), 0 means no TTL \n    public ttl: number;\n \n    // Access Control List - list of accessible resources with permissions flags (1:Read, 2:Create, 4:Update, 8:Delete, 16:Action) \n    public acl: StringKeyIntValue[];\n \n    // Key version (for key rotation) \n    public version: number;\n \n    // Flag to indicate if this a system key or user defined key \n    public systemKey: boolean;\n \n    // Flag to indicate if the key is enabled \n    public enabled: boolean;\n \n    // The API Key (this value is auto generated and not stored in the DB) \n    public key: string;\n \n \n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Audit Log - each entry represents a single action done by user\nexport class AuditLog extends BaseEntity {\n \n    // Account Id (empty if it is non-account entity) \n    public accountId: string;\n \n    // User Id \n    public userId: string;\n \n    // User type \n    public userType: UserTypeCode;\n \n    // Action that was performed \n    public action: string;\n \n    // Changed item type \n    public itemType: string;\n \n    // Changed item Id \n    public itemId: string;\n \n    // Item Name \n    public itemName: string;\n \n    // Item value before change [Json] \n    public beforeChange: string;\n \n    // Item delta after change [Json] \n    public afterChange: string;\n \n \n}\n\n\n","import { Device } from '../entities/Device';\n\n\n\n// BulkDevices list of devices for bulk operations\nexport class BulkDevices {\n \n    // List of devices \n    public values: Device[];\n \n     constructor(values?: Device[]) { \n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Checkpoint represents parsing status in time that preserves parsing cycle statistics and last checkpoint (timestamp) to avoid parsing the same files over and over again\nexport class Checkpoint extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Timestamp marking checkpoint time [Epoch milliseconds Timestamp] \n    public checkpoint: number;\n \n    // First packet timestamp [Epoch milliseconds Timestamp] \n    public firstPacketTime: number;\n \n    // Last packet timestamp [Epoch milliseconds Timestamp] \n    public lastPacketTime: number;\n \n    // Checkpoint label (usually file name) \n    public label: string;\n \n    // General purpose description \n    public description: string;\n \n    // Total elapsed time (between updated and created time) \n    public elapsed: number;\n \n    // Total files parsed in this cycle \n    public totalFiles: number;\n \n    // Total packets parsed in this cycle \n    public totalPackets: number;\n \n    // Total usage records created \n    public totalUsage: number;\n \n    // Total session records created \n    public totalSession: number;\n \n    // Total RADIUS records created \n    public totalRadius: number;\n \n    // Total number of overlapped packets (their timestamp is earlier than the latest checkpoint) \n    public overlappedPackets: number;\n \n    // Total number of packets that failed parsing \n    public failedPackets: number;\n \n    // Total number of packets nor related to the tracked devices \n    public irrelevantPackets: number;\n \n    // Total number of packets that could not be mapped to device identity \n    public unmappedPackets: number;\n \n    // Total number of successfully processed packets \n    public processedPackets: number;\n \n    // Checkpoint state: 0 - created, 1 - in progress, 2 - completed \n    public state: number;\n \n    // Identity of the worker processed the file \n    public processedBy: string;\n \n \n}\n\n\n","\n\n\n// ComplianceReportSettings is a set of account's compliance report settings.\nexport class ComplianceReportSettings {\n \n    // Compliance report title \n    public title: string;\n \n    // Compliance report subtitle \n    public subTitle: string;\n \n    // Compliance report header \n    public header: string;\n \n    // Compliance report footer \n    public footer: string;\n \n     constructor(title?: string, subTitle?: string, header?: string, footer?: string) { \n        if (title !== undefined) { this.title = title; }\n        if (subTitle !== undefined) { this.subTitle = subTitle; }\n        if (header !== undefined) { this.header = header; }\n        if (footer !== undefined) { this.footer = footer; }\n    }\n\n}\n\n\n","import { OperatorCode } from '../enums/OperatorCode';\n\n\n\nexport class Condition {\n \n    // Field name \n    public field: string;\n \n    // Operator symbol: Eq(=), Neq(!), Gt(>), Gte(>=), Lt(<), Lte(<=), In(*), Not In(-), Between(#) \n    public operator: OperatorCode;\n \n    // Operand double values (more than one values applicable for operators: In(*), Not In(-), Range(#) \n    public values: number[];\n \n    // Operand string values (more than one values applicable for operators: In(*), Not In(-) \n    public strings: string[];\n \n     constructor(field?: string, operator?: OperatorCode, values?: number[], strings?: string[]) { \n        if (field !== undefined) { this.field = field; }\n        if (operator !== undefined) { this.operator = operator; }\n        if (values !== undefined) { this.values = values; }\n        if (strings !== undefined) { this.strings = strings; }\n    }\n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// ConfigParam stores a key-value pair as a system configuration parameter\n// The id is the key of the parameter\nexport class ConfigParam extends BaseEntity {\n \n    // configuration value \n    public value: string;\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// DNSRecord represents network statistics of DNS requests\n// The createdOn field represents the first communication time of the device within this time window\n// The updatedOn field represents the last communication time of the device within this time window\nexport class DNSRecord extends BaseEntity {\n \n    // Indication to the source location of the record \n    public source: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Device IP \n    public deviceIp: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Fully Qualified Domain Name \n    public fqdn: string;\n \n    // List of A records \n    public records: string[];\n \n \n}\n\n\n","import { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { DeviceCreationCode } from '../enums/DeviceCreationCode';\nimport { DeviceIdentityCode } from '../enums/DeviceIdentityCode';\n\n\n\n// DataIngestion is the ingestion pipeline configuration\nexport class DataIngestion {\n \n    // Input files locations \n    public inputURI: string;\n \n    // File format: pcap / pcapng (default) \n    public format: string;\n \n    // Where to archive processed files \n    public archiveURI: string;\n \n    // Input files extensions (filter by extensions) - ignore if empty \n    public inputFilesExt: string[];\n \n    // List of IoT devices subnets - ignore if empty \n    public subNets: string[];\n \n    // List of subnets or IPs to exclude \n    public exclude: string[];\n \n    // Usage time window for aggregation (in seconds) \n    public usageTimeWindowSec: number;\n \n    // Session time window for aggregation (in seconds) \n    public sessionTimeWindowSec: number;\n \n    // Cron schedule template in 6 segment format (see: https://en.wikipedia.org/wiki/Cron) - leave empty for immediate processing \n    public schedule: string;\n \n    // Default device type: UNDEFINED | OTHER | CONTROLLER | METER | SENSOR ... \n    public defaultDeviceType: DeviceTypeCode;\n \n    // Device creation policy based on the PCP parsing (NONE | IP | SID | EID) \n    public deviceCreationPolicy: DeviceCreationCode;\n \n    // How to identify devices during the PCAP parsing (NONE | IP | SID | EID) \n    public deviceIdentityPolicy: DeviceIdentityCode;\n \n     constructor(inputURI?: string, format?: string, archiveURI?: string, inputFilesExt?: string[], subNets?: string[], exclude?: string[], usageTimeWindowSec?: number, sessionTimeWindowSec?: number, schedule?: string, defaultDeviceType?: DeviceTypeCode, deviceCreationPolicy?: DeviceCreationCode, deviceIdentityPolicy?: DeviceIdentityCode) { \n        if (inputURI !== undefined) { this.inputURI = inputURI; }\n        if (format !== undefined) { this.format = format; }\n        if (archiveURI !== undefined) { this.archiveURI = archiveURI; }\n        if (inputFilesExt !== undefined) { this.inputFilesExt = inputFilesExt; }\n        if (subNets !== undefined) { this.subNets = subNets; }\n        if (exclude !== undefined) { this.exclude = exclude; }\n        if (usageTimeWindowSec !== undefined) { this.usageTimeWindowSec = usageTimeWindowSec; }\n        if (sessionTimeWindowSec !== undefined) { this.sessionTimeWindowSec = sessionTimeWindowSec; }\n        if (schedule !== undefined) { this.schedule = schedule; }\n        if (defaultDeviceType !== undefined) { this.defaultDeviceType = defaultDeviceType; }\n        if (deviceCreationPolicy !== undefined) { this.deviceCreationPolicy = deviceCreationPolicy; }\n        if (deviceIdentityPolicy !== undefined) { this.deviceIdentityPolicy = deviceIdentityPolicy; }\n    }\n\n}\n\n\n","import { DeviceReport } from '../entities/DeviceReport';\n\n\n\n// TimeSeriesOfDeviceReport model represents a time series of DeviceReport\nexport class DataPointOfDeviceReport {\n \n    // Sata point timestamp [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Device report value \n    public value: DeviceReport;\n \n     constructor(timestamp?: number, value?: DeviceReport) { \n        if (timestamp !== undefined) { this.timestamp = timestamp; }\n        if (value !== undefined) { this.value = value; }\n    }\n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { DeviceStatusCode } from '../enums/DeviceStatusCode';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { DeviceActionCode } from '../enums/DeviceActionCode';\nimport { SIM } from '../entities/SIM';\n\n\n\n// Device entity is an IoT device representation with attributes and state\nexport class Device extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // The device identity in the external system (used for integration) \n    public externalId: string;\n \n    // Device name \n    public name: string;\n \n    // Device description \n    public description: string;\n \n    // Country name \n    public country: string;\n \n    // Mobile network operator name \n    public operator: string;\n \n    // Device type: UNDEFINED | CONTROLLER | METER | SENSOR ... \n    public type: DeviceTypeCode;\n \n    // Device status: UNDEFINED | PENDING | ACTIVE |  INACTIVE | SUSPENDED \n    public status: DeviceStatusCode;\n \n    // Device last activity timestamp [Epoch milliseconds Timestamp] \n    public lastActivity: number;\n \n    // Device MAC address \n    public mac: string;\n \n    // Device IP address (IPv4 or IPv6) \n    public ip: string;\n \n    // Device mobile subscriber id (IMSI or SUPI for 5G) \n    public sid: string;\n \n    // Device mobile equipment id (IMEI or PEI for 5G) \n    public eid: string;\n \n    // Device current security score \n    public score: number;\n \n    // List of device tags \n    public tags: string[];\n \n    // Custom attributes (key-value pairs) \n    public labels: StringKeyValue[];\n \n    // Number of events for the time period (calculated field) \n    public eventCount: number;\n \n    // Action applied on the device \n    public actionApplied: DeviceActionCode;\n \n    // Who applied the action (user id) \n    public actionAppliedBy: string;\n \n    // When action was applied [Epoch milliseconds Timestamp] \n    public actionAppliedOn: number;\n \n    // List of SIM cards associated with the device \n    public simCards: SIM[];\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// DeviceReport is a periodic (usually daily) snapshot on status of all devices, field createdOn indicates the snapshot time\nexport class DeviceReport extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Total device count \n    public totalDevices: number;\n \n    // Total active device count \n    public activeDevices: number;\n \n    // Total device at risk count \n    public devicesAtRisk: number;\n \n    // Total affected device count: (where their distinct event count is more than 0) \n    public affectedDevices: number;\n \n \n}\n\n\n","import { SIM } from '../entities/SIM';\nimport { Event } from '../entities/Event';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { DeviceStatusCode } from '../enums/DeviceStatusCode';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { DeviceActionCode } from '../enums/DeviceActionCode';\n\n\n\n// DeviceWithEvents entity is a device with its related events (for display only)\nexport class DeviceWithEvents extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // The device identity in the external system (used for integration) id \n    public externalId: string;\n \n    // Device name \n    public name: string;\n \n    // Device description \n    public description: string;\n \n    // Country name \n    public country: string;\n \n    // Mobile network operator name \n    public operator: string;\n \n    // Device type: UNDEFINED | CONTROLLER | METER | SENSOR ... \n    public type: DeviceTypeCode;\n \n    // Device status: UNDEFINED | PENDING | ACTIVE |  INACTIVE | SUSPENDED \n    public status: DeviceStatusCode;\n \n    // Device last activity timestamp [Epoch milliseconds Timestamp] \n    public lastActivity: number;\n \n    // Device MAC address \n    public mac: string;\n \n    // Device IP address (IPv4 or IPv6) \n    public ip: string;\n \n    // Device mobile subscriber id (IMSI or SUPI for 5G) \n    public sid: string;\n \n    // Device mobile equipment id (IMEI or PEI for 5G) \n    public eid: string;\n \n    // Device current security score \n    public score: number;\n \n    // List of device tags \n    public tags: string[];\n \n    // Custom attributes (key-value pairs) \n    public labels: StringKeyValue[];\n \n    // Number of events for the time period (calculated field) \n    public eventCount: number;\n \n    // Action applied on the device \n    public actionApplied: DeviceActionCode;\n \n    // Who applied the action (user id) \n    public actionAppliedBy: string;\n \n    // When action was applied [Epoch milliseconds Timestamp] \n    public actionAppliedOn: number;\n \n    // List of SIM cards associated with the device \n    public simCards: SIM[];\n \n    // Device events list \n    public events: Event[];\n \n \n}\n\n\n","import { Tuple } from '../common/Tuple';\n\n\n\n// Distribution model represents a grouped counts of elements of generic type int (usually enum)\nexport class Distribution {\n \n    // Name of the time series \n    public name: string;\n \n    // Total count (of all group elements) \n    public total: number;\n \n    // Series of generic data points \n    public values: Tuple[];\n \n     constructor(name?: string, total?: number, values?: Tuple[]) { \n        if (name !== undefined) { this.name = name; }\n        if (total !== undefined) { this.total = total; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { Indicator } from '../common/Indicator';\nimport { GeoData } from '../common/GeoData';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { EventStatusCode } from '../enums/EventStatusCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { EventCategoryCode } from '../enums/EventCategoryCode';\nimport { EventOccurrence } from '../entities/EventOccurrence';\nimport { TrafficDirectionCode } from '../enums/TrafficDirectionCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { EventTypeCode } from '../enums/EventTypeCode';\n\n\n\n// Alert entity\n// The Alert entity representing an aggregation of many Event occurrences of the same type on the same device in a fixed time period (30 days)\n// The purpose of this aggregation is to avoid flooding the user with many (hundreds and thousands) of events of the same type\nexport class Event extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Event type: UNDEFINED | DDOS | PORT_SCANNING | DEVICE_TAKEOVER ... \n    public type: EventTypeCode;\n \n    // Event severity level: UNDEFINED | LOW | MEDIUM | HIGH | CRITICAL \n    public severity: SeverityTypeCode;\n \n    // Event current security score \n    public score: number;\n \n    // Probability score by IP reputation engine \n    public probability: number;\n \n    // Event workflow status: UNDEFINED | NEW | OPEN ... \n    public status: EventStatusCode;\n \n    // List of event indicators \n    public indicators: Indicator[];\n \n    // Rule type: UNDEFINED | SUSPICIOUS_IP | STATIC | ANOMALY \n    public ruleType: RuleTypeCode;\n \n    // Static Rule id (in case of SUSPICIOUS_IP, it should be the IP value) \n    public ruleId: string;\n \n    // The allocated IP for the device at the time of the event occurrence \n    public sourceIp: string;\n \n    // Target IP address for some of the events (e.g. suspicious IP) \n    public targetIp: string;\n \n    // GeoIP information based on MaxMind database \n    public targetLocation: GeoData;\n \n    // Event description \n    public description: string;\n \n    // Additional Event tags \n    public tags: string[];\n \n    // List of custom attributes (key-value pairs) \n    public labels: StringKeyValue[];\n \n    // Event category \n    public category: EventCategoryCode;\n \n    // Recommended action description to apply on the device \n    public recommendedAction: string;\n \n    // DEPRECATED: List of occurrences of the aggregated event \n    public occurrences: EventOccurrence[];\n \n    // Denotes network traffic direction: UNDEFINED | INBOUND | OUTBOUND \n    public trafficDirection: TrafficDirectionCode;\n \n    // Contains confidence score of malicious IP detection. Value range: 0-100 \n    public confidenceScore: number;\n \n    // Event occurrences count \n    public occurrencesCount: boolean;\n \n \n}\n\n\n","import { Indicator } from '../common/Indicator';\nimport { TrafficDirectionCode } from '../enums/TrafficDirectionCode';\n\n\n\n// A single instance of event generated for the same deviceId based on the same rule on the same month\nexport class EventOccurrence {\n \n    // Event occurrence time [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Referenced source file \n    public source: string;\n \n    // The allocated IP for the device at the time of the event occurrence \n    public sourceIp: string;\n \n    // List of event occurrence indicators \n    public indicators: Indicator[];\n \n    // Denotes network traffic direction: UNDEFINED | INBOUND | OUTBOUND \n    public trafficDirection: TrafficDirectionCode;\n \n     constructor(timestamp?: number, source?: string, sourceIp?: string, indicators?: Indicator[], trafficDirection?: TrafficDirectionCode) { \n        if (timestamp !== undefined) { this.timestamp = timestamp; }\n        if (source !== undefined) { this.source = source; }\n        if (sourceIp !== undefined) { this.sourceIp = sourceIp; }\n        if (indicators !== undefined) { this.indicators = indicators; }\n        if (trafficDirection !== undefined) { this.trafficDirection = trafficDirection; }\n    }\n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { EventCategoryCode } from '../enums/EventCategoryCode';\nimport { Device } from '../entities/Device';\nimport { EventStatusCode } from '../enums/EventStatusCode';\nimport { Indicator } from '../common/Indicator';\nimport { GeoData } from '../common/GeoData';\nimport { EventOccurrence } from '../entities/EventOccurrence';\nimport { TrafficDirectionCode } from '../enums/TrafficDirectionCode';\n\n\n\n// EventWithDevice entity is an event with the device information (for display only)\nexport class EventWithDevice extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Event type: UNDEFINED | DDOS | PORT_SCANNING | DEVICE_TAKEOVER ... \n    public type: EventTypeCode;\n \n    // Event severity level: UNDEFINED | LOW | MEDIUM | HIGH | CRITICAL \n    public severity: SeverityTypeCode;\n \n    // Event current security score \n    public score: number;\n \n    // Probability score by IP reputation engine \n    public probability: number;\n \n    // Event workflow status: UNDEFINED | NEW | OPEN ... \n    public status: EventStatusCode;\n \n    // List of event indicators \n    public indicators: Indicator[];\n \n    // Rule engine type \n    public ruleType: RuleTypeCode;\n \n    // Static Rule id \n    public ruleId: string;\n \n    // Target IP address for some of the events (e.g. suspicious IP) \n    public targetIp: string;\n \n    // GeoIP information based on MaxMind database \n    public targetLocation: GeoData;\n \n    // Event description \n    public description: string;\n \n    // Additional Event tags \n    public tags: string[];\n \n    // List of custom attributes (key-value pairs) \n    public labels: StringKeyValue[];\n \n    // Event category \n    public category: EventCategoryCode;\n \n    // Recommended action description to apply on the device \n    public recommendedAction: string;\n \n    // DEPRECATED: List of occurrences of the aggregated event \n    public occurrences: EventOccurrence[];\n \n    // Denotes network traffic direction: UNDEFINED | INBOUND | OUTBOUND \n    public trafficDirection: TrafficDirectionCode;\n \n    // Contains confidence score of malicious IP detection. Value range: 0-100 \n    public confidenceScore: number;\n \n    // Event occurrences count \n    public occurrencesCount: boolean;\n \n    // Device attached to the event \n    public device: Device;\n \n \n}\n\n\n","import { FeatureCode } from '../enums/FeatureCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Feature entity is capability in the system used for feature toggle\nexport class Feature extends BaseEntity {\n \n    // Feature code \n    public code: FeatureCode;\n \n    // Feature name \n    public name: string;\n \n \n}\n\n\n","import { FeatureCode } from '../enums/FeatureCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// FeaturesGroup group represents a group of capabilities in the system used for feature toggle\nexport class FeaturesGroup extends BaseEntity {\n \n    // Features group display name \n    public name: string;\n \n    // List of features \n    public features: FeatureCode[];\n \n \n}\n\n\n","import { AccountRole } from '../common/AccountRole';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Group represents a set of memberships to various accounts.\nexport class Group extends BaseEntity {\n \n    // Group name \n    public name: string;\n \n    // The group identity in the external system (e.g. Billing, CRM etc) @json:externalId\"` \n    public externalId: string;\n \n    // Group email \n    public email: string;\n \n    // List of group roles in the accounts \n    public accountRoles: AccountRole[];\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Image stores a small base64 picture (such as: user avatar, account logo, etc) or URI (for large pictures) in the database\n// The id of the image is the entity id * @Table: image\nexport class Image extends BaseEntity {\n \n    // Image content URL (starts with http) or embedded image (base64) \n    public content: string;\n \n    // Image content Mime Type \n    public contentType: string;\n \n \n}\n\n\n","import { InsightTypeCode } from '../enums/InsightTypeCode';\nimport { InsightStatusCode } from '../enums/InsightStatusCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { DirectionContextCode } from '../enums/DirectionContextCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Insight\n// The Insight entity is created by the insights micro service and represents an account-wide insight.\nexport class Insight extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Insight specification Id \n    public specId: string;\n \n    // Insight day (number representing a day in the format of: yyyymmdd) \n    public dayId: number;\n \n    // Insight type: UNDEFINED | EVENTS | STATISTICS \n    public type: InsightTypeCode;\n \n    // Insight status: UNDEFINED | INACTIVE | PENDING | ACTIVE \n    public status: InsightStatusCode;\n \n    // The string representing the insight description in the UI \n    public description: string;\n \n    // Linked objects for this insight \n    public links: string[];\n \n    // Event severity: UNDEFINED | LOW | MEDIUM |  HIGH | ... \n    public severity: SeverityTypeCode;\n \n    // Title : short description of insight \n    public title: string;\n \n    // InsightDirectionContext: UNDEFINED | EVENT_LIST | DEVICE_LIST | EVENT_DETAILS | DEVICE_DETAILS \n    public insightDirectionContext: DirectionContextCode;\n \n \n}\n\n\n","import { InsightTypeCode } from '../enums/InsightTypeCode';\nimport { DirectionContextCode } from '../enums/DirectionContextCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// InsightQuery\n// The InsightQuery entity is a definition of insight query to execute periodically in order to generate \"insights\" for the users.\nexport class InsightQuery extends BaseEntity {\n \n    // Insight type: UNDEFINED | EVENTS | STATISTICS \n    public type: InsightTypeCode;\n \n    // Templated string to show the description in the UI \n    public description: string;\n \n    // Insight query definition (KQL) \n    public query: string;\n \n    // InsightDirectionContext: UNDEFINED | EVENT_LIST | DEVICE_LIST | EVENT_DETAILS | DEVICE_DETAILS \n    public insightDirectionContext: DirectionContextCode;\n \n    // Insight UI query definition . query to use from API as response to UI on clickable insight \n    public uIQuery: string;\n \n \n}\n\n\n","import { InsightStatusCode } from '../enums/InsightStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// InsightSpec\n// The InsightSpec entity is a link between account and stream Id to insight query.\nexport class InsightSpec extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Insight query Id \n    public queryId: string;\n \n    // Is Insight enabled (if disabled, it will not be calculated) \n    public enabled: boolean;\n \n    // Insight status: UNDEFINED | INACTIVE | PENDING | ACTIVE \n    public status: InsightStatusCode;\n \n \n}\n\n\n","import { IntKeyValue } from '../common/IntKeyValue';\n\n\n\n// IntDistribution model represents a grouped counts of elements of type int (usually enum)\nexport class IntDistribution {\n \n    // Distribution name \n    public name: string;\n \n    // Total count (of all elements) \n    public total: number;\n \n    // List of elements mapped to counter \n    public values: IntKeyValue[];\n \n     constructor(name?: string, total?: number, values?: IntKeyValue[]) { \n        if (name !== undefined) { this.name = name; }\n        if (total !== undefined) { this.total = total; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { IntegrationTypeCode } from '../enums/IntegrationTypeCode';\nimport { IntegrationTriggerCode } from '../enums/IntegrationTriggerCode';\nimport { HttpMethodCode } from '../enums/HttpMethodCode';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { DeviceActionCode } from '../enums/DeviceActionCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Integration specifications\nexport class Integration extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id (leave empty to apply integration on all streams) \n    public streamId: string;\n \n    // Integration type (HTTP | SMTP | EMAIL ...) \n    public type: IntegrationTypeCode;\n \n    // Integration trigger (EVENT | ACTION ...) \n    public trigger: IntegrationTriggerCode;\n \n    // Integration name \n    public name: string;\n \n    // Is integration enabled \n    public enabled: boolean;\n \n    // Host name or ip address (applicable for all protocols) \n    public host: string;\n \n    // Port number (applicable for all protocols) \n    public port: number;\n \n    // User (applicable for all protocols) \n    public user: string;\n \n    // Password (applicable for all protocols) \n    public password: string;\n \n    // HTTP protocol URL path (applicable for http/https protocols) \n    public url: string;\n \n    // HTTP protocol method: GET | POST | PUT | PATCH | DELETE (applicable for http/https protocols) \n    public method: HttpMethodCode;\n \n    // HTTP protocol Headers (applicable for http/https protocols) \n    public headers: StringKeyValue[];\n \n    // Message content mime type \n    public mimeType: string;\n \n    // SMTP/EMAIL protocol List of recipients \n    public recipients: string[];\n \n    // SMTP/EMAIL protocol Message subject template \n    public subject: string;\n \n    // Message body template \n    public body: string;\n \n    // SMTP/EMAIL sender (will be: system@pulseiot.io if it is empty) \n    public from: string;\n \n    // Activate integration only if the event object type code is in the list (empty list means no filter) \n    public eventTypes: EventTypeCode[];\n \n    // Activate integration only if the event severity matching this value \n    public eventSeverity: SeverityTypeCode;\n \n    // Activate integration only for specific action (applicable for Trigger = ACTION) \n    public preventiveAction: DeviceActionCode;\n \n \n}\n\n\n","import { MemberRoleCode } from '../enums/MemberRoleCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Member represents a user in the account and the role he has in this account\n// User may have several memberships for several accounts, each with a different role\nexport class Member extends BaseEntity {\n \n    // User Id \n    public userId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Member role in the account \n    public role: MemberRoleCode;\n \n \n}\n\n\n","import { StringKeyValue } from '../common/StringKeyValue';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Radius entity is an IP allocation to device IMSI entry\nexport class Radius extends BaseEntity {\n \n    // Indication to the source location of the record \n    public source: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // When the IP was assigned to the subscriber [Epoch milliseconds Timestamp] \n    public assignedOn: number;\n \n    // Device MAC address \n    public mac: string;\n \n    // Device IP address (IPv4 or IPv6) \n    public ip: string;\n \n    // Device mobile subscriber id (IMSI or SUPI for 5G) \n    public sid: string;\n \n    // Device mobile equipment id (IMEI or PEI for 5G) \n    public eid: string;\n \n    // Country name \n    public country: string;\n \n    // Mobile network operator name \n    public operator: string;\n \n    // Custom attributes (key-value pairs) \n    public attributes: StringKeyValue[];\n \n \n}\n\n\n","import { ReportTypeCode } from '../enums/ReportTypeCode';\nimport { TimeFrame } from '../common/TimeFrame';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Report entity represents a system generated and scheduled report data\nexport class Report extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // User who owns the report \n    public userId: string;\n \n    // Report name \n    public name: string;\n \n    // Report scheduler in Crontab format (6 space-separated fields: sec, min, hour, day, month, dayOfWeek) see syntax (https://en.wikipedia.org/wiki/Cron) Empty string means no scheduling \n    public cron: string;\n \n    // Email recipients list \n    public recipients: string[];\n \n    // Email subject \n    public subject: string;\n \n    // Report type (COMPLIANCE | DEVICES | EVENTS ...) \n    public reportType: ReportTypeCode;\n \n    // Absolute or relative time (epoch time milliseconds) to define start time and end time \n    public timeFrame: TimeFrame;\n \n \n}\n\n\n","import { DataSourceCode } from '../enums/DataSourceCode';\nimport { Condition } from '../entities/Condition';\nimport { DeviceTypeCode } from '../enums/DeviceTypeCode';\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\n\n\n\n// Deterministic Rule definition\nexport class Rule extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Rule name \n    public name: string;\n \n    // Rule type \n    public type: RuleTypeCode;\n \n    // Rule description \n    public description: string;\n \n    // Flag to indicate if this is a system rule (read-only) or user-defined rule \n    public isSystemRule: boolean;\n \n    // Flag to indicate if this rule is active (true) or suspended (false), only active rules are evaluated \n    public isActiveRule: boolean;\n \n    // Rule context - what is the data source to evaluate the rule on \n    public context: DataSourceCode;\n \n    // List of AND conditions, all of them must be true for the rule to trigger event \n    public matchAll: Condition[];\n \n    // List of OR conditions, at least one of them must be true for the rule to trigger event} \n    public matchAny: Condition[];\n \n    // Exclude devices with ID included in this list \n    public excludeIDs: string[];\n \n    // Exclude devices with type included in this list \n    public excludeTags: string[];\n \n    // Exclude devices with this type \n    public excludeTypes: DeviceTypeCode[];\n \n    // The time duration (in seconds) for consecutive aggregations \n    public timeWindowSec: number;\n \n    // Set the event type on events generated by this rule \n    public setEventType: EventTypeCode;\n \n    // Set the event severity on events generated by this rule \n    public setEventSeverity: SeverityTypeCode;\n \n \n}\n\n\n","import { DataSourceCode } from '../enums/DataSourceCode';\nimport { EventTypeCode } from '../enums/EventTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// RuleTemplate entity is used to define rules quickly based on pre-defined templates\nexport class RuleTemplate extends BaseEntity {\n \n    // Rule template name \n    public name: string;\n \n    // Rule template description \n    public description: string;\n \n    // Rule context - what is the data source to evaluate the rule on \n    public context: DataSourceCode;\n \n    // List of AND conditions, all of them must be true for the rule to trigger event \n    public matchAll: string[];\n \n    // List of OR conditions, at least one of them must be true for the rule to trigger event \n    public matchAny: string[];\n \n    // The time duration (in seconds) for consecutive aggregations \n    public timeWindowSec: number;\n \n    // Set the event type on events generated by this rule \n    public setEventType: EventTypeCode;\n \n    // Set the event severity on events generated by this rule \n    public setEventSeverity: SeverityTypeCode;\n \n \n}\n\n\n","\n\n\n// SIM entity represents a physical SIM (Subscriber Identity Module) card used in an IoT device to access the internet via a cellular provider\nexport class SIM {\n \n    // Unique SIM Identity (ICCID or IMSI or MSISDN or IP in this order) \n    public id: string;\n \n    // The IP allocation of the SIM \n    public ip: string;\n \n    // The unique serial number, integrated circuit card identification \n    public iccid: string;\n \n    // The international mobile subscriber identity number \n    public imsi: string;\n \n    // Mobile Subscriber ISDN Number (the actual phone number with the country prefix) \n    public msisdn: string;\n \n     constructor(id?: string, iP?: string, iCCID?: string, iMSI?: string, mSISDN?: string) { \n        if (id !== undefined) { this.id = id; }\n        if (iP !== undefined) { this.ip = iP; }\n        if (iCCID !== undefined) { this.iccid = iCCID; }\n        if (iMSI !== undefined) { this.imsi = iMSI; }\n        if (mSISDN !== undefined) { this.msisdn = mSISDN; }\n    }\n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// ServiceStatus represents applicative status of a pulse service with a set of metrics\nexport class ServiceStatus extends BaseEntity {\n \n    // Service name \n    public serviceName: string;\n \n    // Host (machine) name \n    public hostName: string;\n \n    // Start time of the service [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // Account Id (if applicable) \n    public accountId: string;\n \n    // Map[ of application metrics \n    public metrics: any;\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// SessionRecord represents network statistics for a session\n// The unique Id of session record is based on the template: [window_start_time]-[device_id]-[session_id]\n// The createdOn field represents the first communication time of the device within this time window\n// The updatedOn field represents the last communication time of the device within this time window\nexport class SessionRecord extends BaseEntity {\n \n    // Indication to the source location of the record \n    public source: string;\n \n    // Session Id is a unique identifier within the time window \n    public sessionId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Device SIM card ID (to support multiple SIMs) \n    public simId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // Device (source) IP (the IP that was allocated to this device in the time this record was created) \n    public deviceIp: string;\n \n    // Device (source) port \n    public devicePort: number;\n \n    // Destination (remote) IP \n    public dstIP: string;\n \n    // Destination (remote) Port \n    public dstPort: number;\n \n    // Destination (remote) DNS name FQDN \n    public dstDns: string;\n \n    // Protocol \n    public protocol: string;\n \n    // Number of incoming packets (to the device) \n    public packetsIn: number;\n \n    // Number of outgoing packets (from the device) \n    public packetsOut: number;\n \n    // Total number of incoming bytes (to the device) \n    public bytesIn: number;\n \n    // Total number of outgoing bytes (from the device) \n    public bytesOut: number;\n \n    // List of labels \n    public labels: string[];\n \n \n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// Shieldex is a security score per account level calculated periodically\nexport class Shieldex extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Total number of events per account per stream \n    public eventCount: number;\n \n    // Shield index score (1-100) \n    public score: number;\n \n \n}\n\n\n","import { StreamConfig } from '../entities/StreamConfig';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { StringKeyValue } from '../common/StringKeyValue';\n\n\n\n// Stream represents data stream configuration for group of identical IoT devices service the same purpose and sharing the same attributes (e.g. water meter, point-of-sale, ATM IP camera etc)\nexport class Stream extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Stream name \n    public name: string;\n \n    // Stream description \n    public description: string;\n \n    // Flag to indicate if stream is enabled (to be processed) \n    public enabled: boolean;\n \n    // List of custom attributes (key-value pairs) \n    public labels: StringKeyValue[];\n \n    // Stream configuration \n    public config: StreamConfig;\n \n \n}\n\n\n","import { DeviceConfig } from '../common/DeviceConfig';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { Thresholds } from '../common/Thresholds';\nimport { ShieldexConfig } from '../common/ShieldexConfig';\nimport { EventSeverityConfig } from '../common/EventSeverityConfig';\n\n\n\n// Internal structure used by the AI to fine-tune the analytics thresholds\nexport class StreamAnalyticsConfig extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Set of stream configuration thresholds \n    public thresholds: Thresholds;\n \n    // Set of stream shieldex configuration \n    public shieldexConfig: ShieldexConfig;\n \n    // Set of event severity configuration \n    public eventSeverityConfig: EventSeverityConfig;\n \n    // Set of device related configurations \n    public deviceConfig: DeviceConfig;\n \n \n}\n\n\n","import { SessionTransform } from '../common/SessionTransform';\nimport { UsageTransform } from '../common/UsageTransform';\nimport { Thresholds } from '../common/Thresholds';\nimport { ShieldexConfig } from '../common/ShieldexConfig';\nimport { EventSeverityConfig } from '../common/EventSeverityConfig';\nimport { DeviceActionCode } from '../enums/DeviceActionCode';\nimport { DeviceConfig } from '../common/DeviceConfig';\nimport { DataIngestion } from '../entities/DataIngestion';\n\n\n\n// StreamConfig is a stream configuration description\nexport class StreamConfig {\n \n    // Stream data ingestion pipeline \n    public ingest: DataIngestion;\n \n    // Session data transform parameters (normalize values) \n    public sessionTransform: SessionTransform;\n \n    // Usage data transform parameters (normalize values) \n    public usageTransform: UsageTransform;\n \n    // Set of stream configuration thresholds \n    public thresholds: Thresholds;\n \n    // Set of stream shieldex configuration \n    public shieldexConfig: ShieldexConfig;\n \n    // Set of event severity configuration \n    public eventSeverityConfig: EventSeverityConfig;\n \n    // Set of available preventive actions to apply \n    public preventiveActions: DeviceActionCode[];\n \n    // Set of device related configurations \n    public deviceConfig: DeviceConfig;\n \n     constructor(ingest?: DataIngestion, sessionTransform?: SessionTransform, usageTransform?: UsageTransform, thresholds?: Thresholds, shieldexConfig?: ShieldexConfig, eventSeverityConfig?: EventSeverityConfig, preventiveActions?: DeviceActionCode[], deviceConfig?: DeviceConfig) { \n        if (ingest !== undefined) { this.ingest = ingest; }\n        if (sessionTransform !== undefined) { this.sessionTransform = sessionTransform; }\n        if (usageTransform !== undefined) { this.usageTransform = usageTransform; }\n        if (thresholds !== undefined) { this.thresholds = thresholds; }\n        if (shieldexConfig !== undefined) { this.shieldexConfig = shieldexConfig; }\n        if (eventSeverityConfig !== undefined) { this.eventSeverityConfig = eventSeverityConfig; }\n        if (preventiveActions !== undefined) { this.preventiveActions = preventiveActions; }\n        if (deviceConfig !== undefined) { this.deviceConfig = deviceConfig; }\n    }\n\n}\n\n\n","\n\n\n// TeaserPopUpSettings is a set of account's teaser pop up settings.\nexport class TeaserPopUpSettings {\n \n    // Teaser Pop Up header \n    public header: string;\n \n    // Teaser Pop Up content \n    public content: string;\n \n    // Teaser Pop Up notification content \n    public notificationContent: string;\n \n     constructor(header?: string, content?: string, notificationContent?: string) { \n        if (header !== undefined) { this.header = header; }\n        if (content !== undefined) { this.content = content; }\n        if (notificationContent !== undefined) { this.notificationContent = notificationContent; }\n    }\n\n}\n\n\n","import { TimeFrame } from '../common/TimeFrame';\nimport { DataPointOfDeviceReport } from '../entities/DataPointOfDeviceReport';\n\n\n\n// TimeSeriesOfDeviceReport model represents a time series of DeviceReport\nexport class TimeSeriesOfDeviceReport {\n \n    // Name of the time series \n    public name: string;\n \n    // Range of the series (from ... to) \n    public range: TimeFrame;\n \n    // Series of device report data points \n    public values: DataPointOfDeviceReport[];\n \n     constructor(name?: string, range?: TimeFrame, values?: DataPointOfDeviceReport[]) { \n        if (name !== undefined) { this.name = name; }\n        if (range !== undefined) { this.range = range; }\n        if (values !== undefined) { this.values = values; }\n    }\n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// UsageRecord represents network statistics\n// The unique Id of usage record is based on the template: [window_start_time]-[stream_id]-[device_id]\n// The createdOn field represents the first communication time of the device within this time window\n// The updatedOn field represents the last communication time of the device within this time window\nexport class UsageRecord extends BaseEntity {\n \n    // Indication to the source location of the record \n    public source: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Stream Id \n    public streamId: string;\n \n    // Device Id \n    public deviceId: string;\n \n    // Device IP (temporary IP that was allocated to this device in the time this record was created) \n    public deviceIp: string;\n \n    // Device SIM card ID (to support multiple SIMs) \n    public simId: string;\n \n    // Start window time [Epoch milliseconds Timestamp] \n    public startTime: number;\n \n    // End window time [Epoch milliseconds Timestamp] \n    public endTime: number;\n \n    // List of source ports \n    public srcPortsList: number[];\n \n    // Number of source ports \n    public srcPortsCount: number;\n \n    // List of destination ports \n    public dstPortsList: number[];\n \n    // Number of destination ports \n    public dstPortsCount: number;\n \n    // List of outbound endpoints \n    public endpointsList: string[];\n \n    // Number of outbound endpoints (IPs) \n    public endpointsCount: number;\n \n    // List of outbound endpoints that sent data to the device \n    public srcEndpoints: string[];\n \n    // Number of outbound endpoints that sent data to the device \n    public srcEndpointsCount: number;\n \n    // List of outbound endpoints that received data from the device \n    public dstEndpoints: string[];\n \n    // Number of outbound endpoints that received data from the device \n    public dstEndpointsCount: number;\n \n    // Number of incoming packets (to the device) \n    public packetsIn: number;\n \n    // Number of outgoing packets (from the device) \n    public packetsOut: number;\n \n    // Total number of incoming bytes (to the device) \n    public bytesIn: number;\n \n    // Total number of outgoing bytes (from the device) \n    public bytesOut: number;\n \n    // Number of outgoing Ack flags (applicable only for TCP based protocols) \n    public srcAckFlags: number;\n \n    // Number of incoming Ack flags (applicable only for TCP based protocols) \n    public dstAckFlags: number;\n \n    // Number of outgoing Syn flags (applicable only for TCP based protocols) \n    public srcSynFlags: number;\n \n    // Number of incoming Syn flags (applicable only for TCP based protocols) \n    public dstSynFlags: number;\n \n    // Number of outgoing Rst flags (applicable only for TCP based protocols) \n    public srcRstFlags: number;\n \n    // Number of incoming Rst flags (applicable only for TCP based protocols) \n    public dstRstFlags: number;\n \n    // List of labels \n    public labels: string[];\n \n \n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// User represents a human / system operator that has access to the system, and can perform operations\n// User authentication is done by an external identity provider\nexport class User extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // The user identity in the external system (e.g. Billing, CRM etc) @json:externalId\"` \n    public externalId: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // When the user signed in for the last time [Epoch milliseconds Timestamp] \n    public lastSignIn: number;\n \n    // List of custom attributes (key-value pairs) \n    public labels: StringKeyValue[];\n \n    // List of groups that the user belongs to and inherits accounts access from \n    public groups: string;\n \n \n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRole } from '../common/AccountRole';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n\n\n// UserMembership model include user data with a specific account membership\nexport class UserMembership extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // When the user signed in for the last time [Epoch milliseconds Timestamp] \n    public lastSignIn: number;\n \n    // User role in the account \n    public accountRole: AccountRole;\n \n \n}\n\n\n","import { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRole } from '../common/AccountRole';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { UserTypeCode } from '../enums/UserTypeCode';\n\n\n\n// UserMemberships model include user data and all its accounts memberships\nexport class UserMemberships extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // When the user signed in for the last time [Epoch milliseconds Timestamp] \n    public lastSignIn: number;\n \n    // List of user roles in all accounts \n    public accountRoles: AccountRole[];\n \n \n}\n\n\n","\n// Account status code\nexport enum AccountStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Active account [1] \n    ACTIVE = 1,\n \n    // Suspended (non-active) account [2] \n    SUSPENDED = 2,\n \n    // Deleted account [3] \n    DELETED = 3,\n \n}\n\n// Return list of AccountStatusCode values and their display names\nexport function GetAccountStatusCodes() : Map<AccountStatusCode, string> {\n\n    let result = new Map<AccountStatusCode, string>();\n\n    \n    result.set(AccountStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(AccountStatusCode.ACTIVE, 'Active');\n    \n    result.set(AccountStatusCode.SUSPENDED, 'Suspended');\n    \n    result.set(AccountStatusCode.DELETED, 'Deleted');\n    \n\n    return result;\n}","\n// Account type code\nexport enum AccountTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Demo account for internal use [1] \n    DEMO = 1,\n \n    // Trial account for pilots [2] \n    TRIAL = 2,\n \n    // Active account for partner [3] \n    PARTNER = 3,\n \n    // Active account for paying customers [4] \n    CUSTOMER = 4,\n \n}\n\n// Return list of AccountTypeCode values and their display names\nexport function GetAccountTypeCodes() : Map<AccountTypeCode, string> {\n\n    let result = new Map<AccountTypeCode, string>();\n\n    \n    result.set(AccountTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(AccountTypeCode.DEMO, 'Demo');\n    \n    result.set(AccountTypeCode.TRIAL, 'Trial');\n    \n    result.set(AccountTypeCode.PARTNER, 'Partner');\n    \n    result.set(AccountTypeCode.CUSTOMER, 'Customer');\n    \n\n    return result;\n}","\n// DataSourceCode represents the sources (indices) of data to apply rules or insights\nexport enum DataSourceCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Data source based on Events [1] \n    EVENT = 1,\n \n    // Data source based on usage records [2] \n    USAGE = 2,\n \n    // Data source based on Session records [3] \n    SESSION = 3,\n \n}\n\n// Return list of DataSourceCode values and their display names\nexport function GetDataSourceCodes() : Map<DataSourceCode, string> {\n\n    let result = new Map<DataSourceCode, string>();\n\n    \n    result.set(DataSourceCode.UNDEFINED, 'Undefined');\n    \n    result.set(DataSourceCode.EVENT, 'Event');\n    \n    result.set(DataSourceCode.USAGE, 'Usage');\n    \n    result.set(DataSourceCode.SESSION, 'Session');\n    \n\n    return result;\n}","\n// Device action code\nexport enum DeviceActionCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Redirect all traffic to an alternative endpoint [1] \n    REDIRECT = 1,\n \n    // Suspend device (make it inactive) [2] \n    SUSPEND = 2,\n \n    // Throttle traffic from/to the device [3] \n    THROTTLE = 3,\n \n    // Block specific external IP [4] \n    BLOCK_IP = 4,\n \n}\n\n// Return list of DeviceActionCode values and their display names\nexport function GetDeviceActionCodes() : Map<DeviceActionCode, string> {\n\n    let result = new Map<DeviceActionCode, string>();\n\n    \n    result.set(DeviceActionCode.UNDEFINED, 'Undefined');\n    \n    result.set(DeviceActionCode.REDIRECT, 'Redirect');\n    \n    result.set(DeviceActionCode.SUSPEND, 'Suspend');\n    \n    result.set(DeviceActionCode.THROTTLE, 'Throttle');\n    \n    result.set(DeviceActionCode.BLOCK_IP, 'Block Ip');\n    \n\n    return result;\n}","\n// Device creation policy code\nexport enum DeviceCreationCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Do not create device [1] \n    NONE = 1,\n \n    // Create Device based on static IP [2] \n    IP = 2,\n \n    // Create Device based on Subscriber Id - IMSI [3] \n    SID = 3,\n \n    // Create Device based on Equipment Id - IMEI [4] \n    EID = 4,\n \n}\n\n// Return list of DeviceCreationCode values and their display names\nexport function GetDeviceCreationCodes() : Map<DeviceCreationCode, string> {\n\n    let result = new Map<DeviceCreationCode, string>();\n\n    \n    result.set(DeviceCreationCode.UNDEFINED, 'Undefined');\n    \n    result.set(DeviceCreationCode.NONE, 'None');\n    \n    result.set(DeviceCreationCode.IP, 'Ip');\n    \n    result.set(DeviceCreationCode.SID, 'Sid');\n    \n    result.set(DeviceCreationCode.EID, 'Eid');\n    \n\n    return result;\n}","\n// Set the device unique identity policy\nexport enum DeviceIdentityCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Device Identity is provided by the system [1] \n    AUTO = 1,\n \n    // Device Identity is based on static IP: ip@stream_id [2] \n    IP = 2,\n \n    // Device Identity is based on Subscriber Id: imsi@stream_id [3] \n    IMSI = 3,\n \n    // Device Identity is based on SIM ICCID: iccid@stream_id [4] \n    ICCID = 4,\n \n    // Device Identity is based on MSISDN: msisdn@stream_id [5] \n    MSISDN = 5,\n \n    // Device Identity is based on Equipment Id: imei@stream_id [6] \n    IMEI = 6,\n \n    // Device Identity is based on MAC address: mac@stream_id [7] \n    MAC = 7,\n \n}\n\n// Return list of DeviceIdentityCode values and their display names\nexport function GetDeviceIdentityCodes() : Map<DeviceIdentityCode, string> {\n\n    let result = new Map<DeviceIdentityCode, string>();\n\n    \n    result.set(DeviceIdentityCode.UNDEFINED, 'Undefined');\n    \n    result.set(DeviceIdentityCode.AUTO, 'Auto');\n    \n    result.set(DeviceIdentityCode.IP, 'Ip');\n    \n    result.set(DeviceIdentityCode.IMSI, 'Imsi');\n    \n    result.set(DeviceIdentityCode.ICCID, 'Iccid');\n    \n    result.set(DeviceIdentityCode.MSISDN, 'Msisdn');\n    \n    result.set(DeviceIdentityCode.IMEI, 'Imei');\n    \n    result.set(DeviceIdentityCode.MAC, 'Mac');\n    \n\n    return result;\n}","\n// Device status code\nexport enum DeviceStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Device is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active device in the system [2] \n    ACTIVE = 2,\n \n    // Inactive device [3] \n    INACTIVE = 3,\n \n    // Blocked device [4] \n    BLOCKED = 4,\n \n}\n\n// Return list of DeviceStatusCode values and their display names\nexport function GetDeviceStatusCodes() : Map<DeviceStatusCode, string> {\n\n    let result = new Map<DeviceStatusCode, string>();\n\n    \n    result.set(DeviceStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(DeviceStatusCode.PENDING, 'Pending');\n    \n    result.set(DeviceStatusCode.ACTIVE, 'Active');\n    \n    result.set(DeviceStatusCode.INACTIVE, 'Inactive');\n    \n    result.set(DeviceStatusCode.BLOCKED, 'Blocked');\n    \n\n    return result;\n}","\n// Device type code\nexport enum DeviceTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Other (Unknown Device) [1] \n    OTHER = 1,\n \n    // Industrial Controller [2] \n    CONTROLLER = 2,\n \n    // General smart meter [3] \n    METER = 3,\n \n    // General sensor [4] \n    SENSOR = 4,\n \n    // General camera [5] \n    CAMERA = 5,\n \n    // Point of sale [6] \n    POS = 6,\n \n    // Pump [7] \n    PUMP = 7,\n \n    // EV charging station [8] \n    CHARGING_STATION = 8,\n \n    // Smart lightning [9] \n    LIGHTNING = 9,\n \n    // Temperature sensor [10] \n    TEMPERATURE_SENSOR = 10,\n \n    // Air Quality sensor [11] \n    AIR_QUALITY_SENSOR = 11,\n \n    // Valve [12] \n    VALVE = 12,\n \n    // Gateway [13] \n    GATEWAY = 13,\n \n    // ATM [14] \n    ATM = 14,\n \n}\n\n// Return list of DeviceTypeCode values and their display names\nexport function GetDeviceTypeCodes() : Map<DeviceTypeCode, string> {\n\n    let result = new Map<DeviceTypeCode, string>();\n\n    \n    result.set(DeviceTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(DeviceTypeCode.OTHER, 'Other');\n    \n    result.set(DeviceTypeCode.CONTROLLER, 'Controller');\n    \n    result.set(DeviceTypeCode.METER, 'Meter');\n    \n    result.set(DeviceTypeCode.SENSOR, 'Sensor');\n    \n    result.set(DeviceTypeCode.CAMERA, 'Camera');\n    \n    result.set(DeviceTypeCode.POS, 'Pos');\n    \n    result.set(DeviceTypeCode.PUMP, 'Pump');\n    \n    result.set(DeviceTypeCode.CHARGING_STATION, 'Charging Station');\n    \n    result.set(DeviceTypeCode.LIGHTNING, 'Lightning');\n    \n    result.set(DeviceTypeCode.TEMPERATURE_SENSOR, 'Temperature Sensor');\n    \n    result.set(DeviceTypeCode.AIR_QUALITY_SENSOR, 'Air Quality Sensor');\n    \n    result.set(DeviceTypeCode.VALVE, 'Valve');\n    \n    result.set(DeviceTypeCode.GATEWAY, 'Gateway');\n    \n    result.set(DeviceTypeCode.ATM, 'Atm');\n    \n\n    return result;\n}","\n// Direction context code\nexport enum DirectionContextCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Event list context [1] \n    EVENT_LIST = 1,\n \n    // Device list context  [2] \n    DEVICE_LIST = 2,\n \n    // Event details context [3] \n    EVENT_DETAILS = 3,\n \n    // Device details context [4] \n    DEVICE_DETAILS = 4,\n \n}\n\n// Return list of DirectionContextCode values and their display names\nexport function GetDirectionContextCodes() : Map<DirectionContextCode, string> {\n\n    let result = new Map<DirectionContextCode, string>();\n\n    \n    result.set(DirectionContextCode.UNDEFINED, 'Undefined');\n    \n    result.set(DirectionContextCode.EVENT_LIST, 'Event List');\n    \n    result.set(DirectionContextCode.DEVICE_LIST, 'Device List');\n    \n    result.set(DirectionContextCode.EVENT_DETAILS, 'Event Details');\n    \n    result.set(DirectionContextCode.DEVICE_DETAILS, 'Device Details');\n    \n\n    return result;\n}","\n// Event category code\nexport enum EventCategoryCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Cyber-Security event [1] \n    SECURITY = 1,\n \n    // Operational event [2] \n    OPERATIONS = 2,\n \n}\n\n// Return list of EventCategoryCode values and their display names\nexport function GetEventCategoryCodes() : Map<EventCategoryCode, string> {\n\n    let result = new Map<EventCategoryCode, string>();\n\n    \n    result.set(EventCategoryCode.UNDEFINED, 'Undefined');\n    \n    result.set(EventCategoryCode.SECURITY, 'Security');\n    \n    result.set(EventCategoryCode.OPERATIONS, 'Operations');\n    \n\n    return result;\n}","\n// Event workflow status code\nexport enum EventStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // New event [1] \n    NEW = 1,\n \n    // Open event, handled by the operator [2] \n    OPEN = 2,\n \n    // Closed event (tagged as True event) [3] \n    CLOSED_TRUE = 3,\n \n    // Closed event (tagged as False event) [4] \n    CLOSED_FALSE = 4,\n \n}\n\n// Return list of EventStatusCode values and their display names\nexport function GetEventStatusCodes() : Map<EventStatusCode, string> {\n\n    let result = new Map<EventStatusCode, string>();\n\n    \n    result.set(EventStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(EventStatusCode.NEW, 'New');\n    \n    result.set(EventStatusCode.OPEN, 'Open');\n    \n    result.set(EventStatusCode.CLOSED_TRUE, 'Closed True');\n    \n    result.set(EventStatusCode.CLOSED_FALSE, 'Closed False');\n    \n\n    return result;\n}","\n// Event type code\nexport enum EventTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Other (Unknown Event) [1] \n    OTHER = 1,\n \n    // Device Takeover [2] \n    DEVICE_TAKEOVER = 2,\n \n    // DDoS [3] \n    DDOS = 3,\n \n    // Unknown Malware [4] \n    UNKNOWN_MALWARE = 4,\n \n    // Man-in-the-Middle [5] \n    MAN_IN_THE_MIDDLE = 5,\n \n    // Data Theft [6] \n    DATA_THEFT = 6,\n \n    // Port Scanning [7] \n    PORT_SCANNING = 7,\n \n    // Abnormal Download [8] \n    ABNORMAL_DOWNLOAD = 8,\n \n    // Abnormal Incoming Connection [9] \n    ABNORMAL_INCOMING_CONNECTION = 9,\n \n    // Unsuccessful Connection Attempts [10] \n    UNSUCCESSFUL_CONNECTION_ATTEMPTS = 10,\n \n    // High Volume Transmit [11] \n    HIGH_VOLUME_TRANSIT = 11,\n \n    // Device Level Attack [12] \n    DEVICE_LEVEL_ATTACK = 12,\n \n    // Replay Attack [13] \n    REPLAY_ATTACK = 13,\n \n    // Attempted Device Takeover [14] \n    DEVICE_TAKEOVER_ATTEMPT = 14,\n \n    // Unknown Operation [15] \n    UNKNOWN_OPERATION = 15,\n \n    // Crypto Mining [16] \n    CRYPTO_MINING = 16,\n \n    // Suspicious IP [17] \n    SUSPICIOUS_IP = 17,\n \n    // Abnormal number of outbound ports [18] \n    ABNORMAL_OUTBOUND_PORTS = 18,\n \n    // Abnormal number of outbound endpoints (destinations) [19] \n    ABNORMAL_OUTBOUND_ENDPOINTS = 19,\n \n}\n\n// Return list of EventTypeCode values and their display names\nexport function GetEventTypeCodes() : Map<EventTypeCode, string> {\n\n    let result = new Map<EventTypeCode, string>();\n\n    \n    result.set(EventTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(EventTypeCode.OTHER, 'Other');\n    \n    result.set(EventTypeCode.DEVICE_TAKEOVER, 'Device Takeover');\n    \n    result.set(EventTypeCode.DDOS, 'Ddos');\n    \n    result.set(EventTypeCode.UNKNOWN_MALWARE, 'Unknown Malware');\n    \n    result.set(EventTypeCode.MAN_IN_THE_MIDDLE, 'Man In The Middle');\n    \n    result.set(EventTypeCode.DATA_THEFT, 'Data Theft');\n    \n    result.set(EventTypeCode.PORT_SCANNING, 'Port Scanning');\n    \n    result.set(EventTypeCode.ABNORMAL_DOWNLOAD, 'Abnormal Download');\n    \n    result.set(EventTypeCode.ABNORMAL_INCOMING_CONNECTION, 'Abnormal Incoming Connection');\n    \n    result.set(EventTypeCode.UNSUCCESSFUL_CONNECTION_ATTEMPTS, 'Unsuccessful Connection Attempts');\n    \n    result.set(EventTypeCode.HIGH_VOLUME_TRANSIT, 'High Volume Transit');\n    \n    result.set(EventTypeCode.DEVICE_LEVEL_ATTACK, 'Device Level Attack');\n    \n    result.set(EventTypeCode.REPLAY_ATTACK, 'Replay Attack');\n    \n    result.set(EventTypeCode.DEVICE_TAKEOVER_ATTEMPT, 'Device Takeover Attempt');\n    \n    result.set(EventTypeCode.UNKNOWN_OPERATION, 'Unknown Operation');\n    \n    result.set(EventTypeCode.CRYPTO_MINING, 'Crypto Mining');\n    \n    result.set(EventTypeCode.SUSPICIOUS_IP, 'Suspicious Ip');\n    \n    result.set(EventTypeCode.ABNORMAL_OUTBOUND_PORTS, 'Abnormal Outbound Ports');\n    \n    result.set(EventTypeCode.ABNORMAL_OUTBOUND_ENDPOINTS, 'Abnormal Outbound Endpoints');\n    \n\n    return result;\n}","\n// Feature code\nexport enum FeatureCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Export events to CSV file [1] \n    EVENTS_EXPORT = 1,\n \n    // Download pcap files to analyze the event[2] \n    EVENT_SOURCE_FILES = 2,\n \n    // Apply preventive action on the event [3] \n    EVENT_ACTION = 3,\n \n    // Export devices to CSV file [4] \n    DEVICES_EXPORT = 4,\n \n    // Device network map [5] \n    DEVICE_NETWORK_MAP = 5,\n \n    // Apply preventive action on the device [6] \n    DEVICE_ACTIONS = 6,\n \n    // Apply preventive action on the device [7] \n    NETWORK_MAP = 7,\n \n    // Create and download compliance report \n    COMPLIANCE_REPORTS = 8,\n \n    // Configure user-defined rules \n    CUSTOM_RULES = 9,\n \n    // Enable push integrations \n    INTEGRATIONS = 10,\n \n}\n\n// Return list of FeatureCode values and their display names\nexport function GetFeatureCodes() : Map<FeatureCode, string> {\n\n    let result = new Map<FeatureCode, string>();\n\n    \n    result.set(FeatureCode.UNDEFINED, 'Undefined');\n    \n    result.set(FeatureCode.EVENTS_EXPORT, 'Events Export');\n    \n    result.set(FeatureCode.EVENT_SOURCE_FILES, 'Event Source Files');\n    \n    result.set(FeatureCode.EVENT_ACTION, 'Event Action');\n    \n    result.set(FeatureCode.DEVICES_EXPORT, 'Devices Export');\n    \n    result.set(FeatureCode.DEVICE_NETWORK_MAP, 'Device Network Map');\n    \n    result.set(FeatureCode.DEVICE_ACTIONS, 'Device Actions');\n    \n    result.set(FeatureCode.NETWORK_MAP, 'Network Map');\n    \n    result.set(FeatureCode.COMPLIANCE_REPORTS, 'Compliance Reports');\n    \n    result.set(FeatureCode.CUSTOM_RULES, 'Custom Rules');\n    \n    result.set(FeatureCode.INTEGRATIONS, 'Integrations');\n    \n\n    return result;\n}","\n// Home Page View code\nexport enum HomePageViewCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // System view [1] \n    SYSTEM = 1,\n \n    // Devices View [2] \n    DEVICES = 2,\n \n    // Malicious IP view [3] \n    MALICIOUS = 3,\n \n}\n\n// Return list of HomePageViewCode values and their display names\nexport function GetHomePageViewCodes() : Map<HomePageViewCode, string> {\n\n    let result = new Map<HomePageViewCode, string>();\n\n    \n    result.set(HomePageViewCode.UNDEFINED, 'Undefined');\n    \n    result.set(HomePageViewCode.SYSTEM, 'System');\n    \n    result.set(HomePageViewCode.DEVICES, 'Devices');\n    \n    result.set(HomePageViewCode.MALICIOUS, 'Malicious');\n    \n\n    return result;\n}","\n// HTTP method code\nexport enum HttpMethodCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // HTTP GET (read) [1] \n    GET = 1,\n \n    // HTTP POST (create) [2] \n    POST = 2,\n \n    // HTTP PUT (update/replace) [3] \n    PUT = 3,\n \n    // HTTP PATCH (update/modify) [4] \n    PATCH = 4,\n \n    // HTTP DELETE (delete) [5] \n    DELETE = 5,\n \n}\n\n// Return list of HttpMethodCode values and their display names\nexport function GetHttpMethodCodes() : Map<HttpMethodCode, string> {\n\n    let result = new Map<HttpMethodCode, string>();\n\n    \n    result.set(HttpMethodCode.UNDEFINED, 'Undefined');\n    \n    result.set(HttpMethodCode.GET, 'Get');\n    \n    result.set(HttpMethodCode.POST, 'Post');\n    \n    result.set(HttpMethodCode.PUT, 'Put');\n    \n    result.set(HttpMethodCode.PATCH, 'Patch');\n    \n    result.set(HttpMethodCode.DELETE, 'Delete');\n    \n\n    return result;\n}","\n// Insight status code\nexport enum InsightStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Inactive (muted) insight [1] \n    INACTIVE = 1,\n \n    // Pending insight (not visible yet - for testing only) [2] \n    PENDING = 2,\n \n    // Active insight [3] \n    ACTIVE = 3,\n \n}\n\n// Return list of InsightStatusCode values and their display names\nexport function GetInsightStatusCodes() : Map<InsightStatusCode, string> {\n\n    let result = new Map<InsightStatusCode, string>();\n\n    \n    result.set(InsightStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(InsightStatusCode.INACTIVE, 'Inactive');\n    \n    result.set(InsightStatusCode.PENDING, 'Pending');\n    \n    result.set(InsightStatusCode.ACTIVE, 'Active');\n    \n\n    return result;\n}","\n// Insight type code\nexport enum InsightTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Event Group insight [1] \n    EVENTS = 1,\n \n    // Statistical insight [2] \n    STATISTICS = 2,\n \n}\n\n// Return list of InsightTypeCode values and their display names\nexport function GetInsightTypeCodes() : Map<InsightTypeCode, string> {\n\n    let result = new Map<InsightTypeCode, string>();\n\n    \n    result.set(InsightTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(InsightTypeCode.EVENTS, 'Events');\n    \n    result.set(InsightTypeCode.STATISTICS, 'Statistics');\n    \n\n    return result;\n}","\n// Integration trigger code\nexport enum IntegrationTriggerCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // EVENT based integration [1] \n    EVENT = 1,\n \n    // ACTION based integration [2] \n    ACTION = 2,\n \n}\n\n// Return list of IntegrationTriggerCode values and their display names\nexport function GetIntegrationTriggerCodes() : Map<IntegrationTriggerCode, string> {\n\n    let result = new Map<IntegrationTriggerCode, string>();\n\n    \n    result.set(IntegrationTriggerCode.UNDEFINED, 'Undefined');\n    \n    result.set(IntegrationTriggerCode.EVENT, 'Event');\n    \n    result.set(IntegrationTriggerCode.ACTION, 'Action');\n    \n\n    return result;\n}","\n// Integration type code\nexport enum IntegrationTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // General HTTP(S) based integration [1] \n    HTTP = 1,\n \n    // General SMTP based integration [2] \n    SMTP = 2,\n \n    // Internal email service integration [3] \n    EMAIL = 3,\n \n    // Internal SMS service integration  [4] \n    SMS = 4,\n \n}\n\n// Return list of IntegrationTypeCode values and their display names\nexport function GetIntegrationTypeCodes() : Map<IntegrationTypeCode, string> {\n\n    let result = new Map<IntegrationTypeCode, string>();\n\n    \n    result.set(IntegrationTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(IntegrationTypeCode.HTTP, 'Http');\n    \n    result.set(IntegrationTypeCode.SMTP, 'Smtp');\n    \n    result.set(IntegrationTypeCode.EMAIL, 'Email');\n    \n    result.set(IntegrationTypeCode.SMS, 'Sms');\n    \n\n    return result;\n}","\n// Member role code (represent role of user in the account)\nexport enum MemberRoleCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account administrator can perform all operations [1] \n    ADMIN = 1,\n \n    // Supervisor can perform operations on events and generate reports [2] \n    SUPERVISOR = 2,\n \n    // Account operator can perform operations on events only [3] \n    OPERATOR = 3,\n \n    // Viewer has read-only permissions [4] \n    VIEWER = 4,\n \n}\n\n// Return list of MemberRoleCode values and their display names\nexport function GetMemberRoleCodes() : Map<MemberRoleCode, string> {\n\n    let result = new Map<MemberRoleCode, string>();\n\n    \n    result.set(MemberRoleCode.UNDEFINED, 'Undefined');\n    \n    result.set(MemberRoleCode.ADMIN, 'Admin');\n    \n    result.set(MemberRoleCode.SUPERVISOR, 'Supervisor');\n    \n    result.set(MemberRoleCode.OPERATOR, 'Operator');\n    \n    result.set(MemberRoleCode.VIEWER, 'Viewer');\n    \n\n    return result;\n}","\n// NetworkMapTypeCode represents the type of network maps\nexport enum NetworkMapTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Top devices network map [1] \n    TOP_DEVICES = 1,\n \n    // Top malicious IP network map [2] \n    TOP_MALICIOUS_IPS = 2,\n \n    // Network devices network map [3] \n    NETWORK = 3,\n \n}\n\n// Return list of NetworkMapTypeCode values and their display names\nexport function GetNetworkMapTypeCodes() : Map<NetworkMapTypeCode, string> {\n\n    let result = new Map<NetworkMapTypeCode, string>();\n\n    \n    result.set(NetworkMapTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(NetworkMapTypeCode.TOP_DEVICES, 'Top Devices');\n    \n    result.set(NetworkMapTypeCode.TOP_MALICIOUS_IPS, 'Top Malicious Ips');\n    \n    result.set(NetworkMapTypeCode.NETWORK, 'Network');\n    \n\n    return result;\n}","\n// OperatorCode represents the rule condition operator such as equal, not equal, less than ...\nexport enum OperatorCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Equal (=) [1] \n    EQ = 1,\n \n    // Not Equal (!=) [2] \n    NEQ = 2,\n \n    // Greater than (>) [3] \n    GT = 3,\n \n    // Greater than or equal (>=) [4] \n    GTE = 4,\n \n    // Less than (<) [5] \n    LT = 5,\n \n    // Less than or equal (<=) \n    LTE = 6,\n \n    // Value included in the list (*) [7] \n    IN = 7,\n \n    // Value not included in the list (-) [8] \n    NOTIN = 8,\n \n    // Value is in the range of 2 elements [9] \n    RANGE = 9,\n \n    // Partial similarity with wildcards (~) [10] \n    LIKE = 10,\n \n    // Array field contains one of the values (@) [11] \n    CONTAINS = 11,\n \n}\n\n// Return list of OperatorCode values and their display names\nexport function GetOperatorCodes() : Map<OperatorCode, string> {\n\n    let result = new Map<OperatorCode, string>();\n\n    \n    result.set(OperatorCode.UNDEFINED, 'Undefined');\n    \n    result.set(OperatorCode.EQ, 'Eq');\n    \n    result.set(OperatorCode.NEQ, 'Neq');\n    \n    result.set(OperatorCode.GT, 'Gt');\n    \n    result.set(OperatorCode.GTE, 'Gte');\n    \n    result.set(OperatorCode.LT, 'Lt');\n    \n    result.set(OperatorCode.LTE, 'Lte');\n    \n    result.set(OperatorCode.IN, 'In');\n    \n    result.set(OperatorCode.NOTIN, 'Notin');\n    \n    result.set(OperatorCode.RANGE, 'Range');\n    \n    result.set(OperatorCode.LIKE, 'Like');\n    \n    result.set(OperatorCode.CONTAINS, 'Contains');\n    \n\n    return result;\n}","\n// Permission flag (it can combine several values)\nexport enum PermissionCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Read permission [1] \n    READ = 1,\n \n    // Create permission [2] \n    CREATE = 2,\n \n    // Update permission [4] \n    UPDATE = 4,\n \n    // Delete permission [8] \n    DELETE = 8,\n \n    // Action permission [16] \n    ACTION = 16,\n \n}\n\n// Return list of PermissionCode values and their display names\nexport function GetPermissionCodes() : Map<PermissionCode, string> {\n\n    let result = new Map<PermissionCode, string>();\n\n    \n    result.set(PermissionCode.UNDEFINED, 'Undefined');\n    \n    result.set(PermissionCode.READ, 'Read');\n    \n    result.set(PermissionCode.CREATE, 'Create');\n    \n    result.set(PermissionCode.UPDATE, 'Update');\n    \n    result.set(PermissionCode.DELETE, 'Delete');\n    \n    result.set(PermissionCode.ACTION, 'Action');\n    \n\n    return result;\n}","\n// Report type code\nexport enum ReportTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Compliance report [1] \n    COMPLIANCE = 1,\n \n    // Devices report [2] \n    DEVICES = 2,\n \n    // Events report [3] \n    EVENTS = 3,\n \n}\n\n// Return list of ReportTypeCode values and their display names\nexport function GetReportTypeCodes() : Map<ReportTypeCode, string> {\n\n    let result = new Map<ReportTypeCode, string>();\n\n    \n    result.set(ReportTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(ReportTypeCode.COMPLIANCE, 'Compliance');\n    \n    result.set(ReportTypeCode.DEVICES, 'Devices');\n    \n    result.set(ReportTypeCode.EVENTS, 'Events');\n    \n\n    return result;\n}","\n// RuleTypeCode represents the sources (engines) of rules\nexport enum RuleTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Suspicious IP based on IP reputation engine [1] \n    SUSPICIOUS_IP = 1,\n \n    // Static rule based on deterministic rule engine [2] \n    STATIC = 2,\n \n    // Rule based on anomaly detection and classification [3] \n    ANOMALY = 3,\n \n}\n\n// Return list of RuleTypeCode values and their display names\nexport function GetRuleTypeCodes() : Map<RuleTypeCode, string> {\n\n    let result = new Map<RuleTypeCode, string>();\n\n    \n    result.set(RuleTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(RuleTypeCode.SUSPICIOUS_IP, 'Suspicious Ip');\n    \n    result.set(RuleTypeCode.STATIC, 'Static');\n    \n    result.set(RuleTypeCode.ANOMALY, 'Anomaly');\n    \n\n    return result;\n}","\n// Severity type (level) code\nexport enum SeverityTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Low severity [1] \n    LOW = 1,\n \n    // Medium severity [2] \n    MEDIUM = 2,\n \n    // High severity [3] \n    HIGH = 3,\n \n    // Critical severity [4] \n    CRITICAL = 4,\n \n}\n\n// Return list of SeverityTypeCode values and their display names\nexport function GetSeverityTypeCodes() : Map<SeverityTypeCode, string> {\n\n    let result = new Map<SeverityTypeCode, string>();\n\n    \n    result.set(SeverityTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(SeverityTypeCode.LOW, 'Low');\n    \n    result.set(SeverityTypeCode.MEDIUM, 'Medium');\n    \n    result.set(SeverityTypeCode.HIGH, 'High');\n    \n    result.set(SeverityTypeCode.CRITICAL, 'Critical');\n    \n\n    return result;\n}","\n// Account type code\nexport enum TrafficDirectionCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Denotes inbound network traffic  [1] \n    INBOUND = 1,\n \n    // Denotes outbound network traffic [2] \n    OUTBOUND = 2,\n \n    // Denotes bidirectional network traffic [3] \n    INOUT = 3,\n \n}\n\n// Return list of TrafficDirectionCode values and their display names\nexport function GetTrafficDirectionCodes() : Map<TrafficDirectionCode, string> {\n\n    let result = new Map<TrafficDirectionCode, string>();\n\n    \n    result.set(TrafficDirectionCode.UNDEFINED, 'Undefined');\n    \n    result.set(TrafficDirectionCode.INBOUND, 'Inbound');\n    \n    result.set(TrafficDirectionCode.OUTBOUND, 'Outbound');\n    \n    result.set(TrafficDirectionCode.INOUT, 'Inout');\n    \n\n    return result;\n}","\n// User status code\nexport enum UserStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // User is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active user in the system [2] \n    ACTIVE = 2,\n \n    // Blocked user (only account system can unblock the user) [4] \n    BLOCKED = 3,\n \n    // Suspended user (about to be deleted) [8] \n    SUSPENDED = 4,\n \n}\n\n// Return list of UserStatusCode values and their display names\nexport function GetUserStatusCodes() : Map<UserStatusCode, string> {\n\n    let result = new Map<UserStatusCode, string>();\n\n    \n    result.set(UserStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(UserStatusCode.PENDING, 'Pending');\n    \n    result.set(UserStatusCode.ACTIVE, 'Active');\n    \n    result.set(UserStatusCode.BLOCKED, 'Blocked');\n    \n    result.set(UserStatusCode.SUSPENDED, 'Suspended');\n    \n\n    return result;\n}","\n// User type code\nexport enum UserTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // System administrator has access to all accounts and permissions to perform all actions [1] \n    SYSADMIN = 1,\n \n    // Support user has view permissions only for all accounts that enabled option Enable Support [2] \n    SUPPORT = 2,\n \n    // Account user - has access to specific accounts with role based access control [3] \n    USER = 3,\n \n    // Account service - to be used by other systems to perform actions using the API (can't login as a user to the portal)' [4]` \n    SERVICE = 4,\n \n}\n\n// Return list of UserTypeCode values and their display names\nexport function GetUserTypeCodes() : Map<UserTypeCode, string> {\n\n    let result = new Map<UserTypeCode, string>();\n\n    \n    result.set(UserTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(UserTypeCode.SYSADMIN, 'Sysadmin');\n    \n    result.set(UserTypeCode.SUPPORT, 'Support');\n    \n    result.set(UserTypeCode.USER, 'User');\n    \n    result.set(UserTypeCode.SERVICE, 'Service');\n    \n\n    return result;\n}","/*\n * Public API Surface of ngx-pulse-lib\n */\n\nexport * from './ngx-pulse-lib.module';\nexport * from './lib';\nexport * from './utils';\nexport * from './config';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.RestUtil"],"mappings":"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"}