// Event type code
export var EventTypeCode;
(function (EventTypeCode) {
    // Undefined [0] 
    EventTypeCode[EventTypeCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Other (Unknown Event) [1] 
    EventTypeCode[EventTypeCode["OTHER"] = 1] = "OTHER";
    // Device Takeover [2] 
    EventTypeCode[EventTypeCode["DEVICE_TAKEOVER"] = 2] = "DEVICE_TAKEOVER";
    // DDoS [3] 
    EventTypeCode[EventTypeCode["DDOS"] = 3] = "DDOS";
    // Unknown Malware [4] 
    EventTypeCode[EventTypeCode["UNKNOWN_MALWARE"] = 4] = "UNKNOWN_MALWARE";
    // Man-in-the-Middle [5] 
    EventTypeCode[EventTypeCode["MAN_IN_THE_MIDDLE"] = 5] = "MAN_IN_THE_MIDDLE";
    // Data Theft [6] 
    EventTypeCode[EventTypeCode["DATA_THEFT"] = 6] = "DATA_THEFT";
    // Port Scanning [7] 
    EventTypeCode[EventTypeCode["PORT_SCANNING"] = 7] = "PORT_SCANNING";
    // Abnormal Download [8] 
    EventTypeCode[EventTypeCode["ABNORMAL_DOWNLOAD"] = 8] = "ABNORMAL_DOWNLOAD";
    // Abnormal Incoming Connection [9] 
    EventTypeCode[EventTypeCode["ABNORMAL_INCOMING_CONNECTION"] = 9] = "ABNORMAL_INCOMING_CONNECTION";
    // Unsuccessful Connection Attempts [10] 
    EventTypeCode[EventTypeCode["UNSUCCESSFUL_CONNECTION_ATTEMPTS"] = 10] = "UNSUCCESSFUL_CONNECTION_ATTEMPTS";
    // High Volume Transmit [11] 
    EventTypeCode[EventTypeCode["HIGH_VOLUME_TRANSIT"] = 11] = "HIGH_VOLUME_TRANSIT";
    // Device Level Attack [12] 
    EventTypeCode[EventTypeCode["DEVICE_LEVEL_ATTACK"] = 12] = "DEVICE_LEVEL_ATTACK";
    // Replay Attack [13] 
    EventTypeCode[EventTypeCode["REPLAY_ATTACK"] = 13] = "REPLAY_ATTACK";
    // Attempted Device Takeover [14] 
    EventTypeCode[EventTypeCode["DEVICE_TAKEOVER_ATTEMPT"] = 14] = "DEVICE_TAKEOVER_ATTEMPT";
    // Unknown Operation [15] 
    EventTypeCode[EventTypeCode["UNKNOWN_OPERATION"] = 15] = "UNKNOWN_OPERATION";
    // Crypto Mining [16] 
    EventTypeCode[EventTypeCode["CRYPTO_MINING"] = 16] = "CRYPTO_MINING";
    // Suspicious IP [17] 
    EventTypeCode[EventTypeCode["SUSPICIOUS_IP"] = 17] = "SUSPICIOUS_IP";
    // Abnormal number of outbound ports [18] 
    EventTypeCode[EventTypeCode["ABNORMAL_OUTBOUND_PORTS"] = 18] = "ABNORMAL_OUTBOUND_PORTS";
    // Abnormal number of outbound endpoints (destinations) [19] 
    EventTypeCode[EventTypeCode["ABNORMAL_OUTBOUND_ENDPOINTS"] = 19] = "ABNORMAL_OUTBOUND_ENDPOINTS";
})(EventTypeCode || (EventTypeCode = {}));
// Return list of EventTypeCode values and their display names
export function GetEventTypeCodes() {
    let result = new Map();
    result.set(EventTypeCode.UNDEFINED, 'Undefined');
    result.set(EventTypeCode.OTHER, 'Other');
    result.set(EventTypeCode.DEVICE_TAKEOVER, 'Device Takeover');
    result.set(EventTypeCode.DDOS, 'Ddos');
    result.set(EventTypeCode.UNKNOWN_MALWARE, 'Unknown Malware');
    result.set(EventTypeCode.MAN_IN_THE_MIDDLE, 'Man In The Middle');
    result.set(EventTypeCode.DATA_THEFT, 'Data Theft');
    result.set(EventTypeCode.PORT_SCANNING, 'Port Scanning');
    result.set(EventTypeCode.ABNORMAL_DOWNLOAD, 'Abnormal Download');
    result.set(EventTypeCode.ABNORMAL_INCOMING_CONNECTION, 'Abnormal Incoming Connection');
    result.set(EventTypeCode.UNSUCCESSFUL_CONNECTION_ATTEMPTS, 'Unsuccessful Connection Attempts');
    result.set(EventTypeCode.HIGH_VOLUME_TRANSIT, 'High Volume Transit');
    result.set(EventTypeCode.DEVICE_LEVEL_ATTACK, 'Device Level Attack');
    result.set(EventTypeCode.REPLAY_ATTACK, 'Replay Attack');
    result.set(EventTypeCode.DEVICE_TAKEOVER_ATTEMPT, 'Device Takeover Attempt');
    result.set(EventTypeCode.UNKNOWN_OPERATION, 'Unknown Operation');
    result.set(EventTypeCode.CRYPTO_MINING, 'Crypto Mining');
    result.set(EventTypeCode.SUSPICIOUS_IP, 'Suspicious Ip');
    result.set(EventTypeCode.ABNORMAL_OUTBOUND_PORTS, 'Abnormal Outbound Ports');
    result.set(EventTypeCode.ABNORMAL_OUTBOUND_ENDPOINTS, 'Abnormal Outbound Endpoints');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRUeXBlQ29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wdWxzZS1saWIvc3JjL2xpYi9lbnVtcy9FdmVudFR5cGVDb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLGtCQUFrQjtBQUNsQixNQUFNLENBQU4sSUFBWSxhQThEWDtBQTlERCxXQUFZLGFBQWE7SUFFckIsaUJBQWlCO0lBQ2pCLDJEQUFhLENBQUE7SUFFYiw2QkFBNkI7SUFDN0IsbURBQVMsQ0FBQTtJQUVULHVCQUF1QjtJQUN2Qix1RUFBbUIsQ0FBQTtJQUVuQixZQUFZO0lBQ1osaURBQVEsQ0FBQTtJQUVSLHVCQUF1QjtJQUN2Qix1RUFBbUIsQ0FBQTtJQUVuQix5QkFBeUI7SUFDekIsMkVBQXFCLENBQUE7SUFFckIsa0JBQWtCO0lBQ2xCLDZEQUFjLENBQUE7SUFFZCxxQkFBcUI7SUFDckIsbUVBQWlCLENBQUE7SUFFakIseUJBQXlCO0lBQ3pCLDJFQUFxQixDQUFBO0lBRXJCLG9DQUFvQztJQUNwQyxpR0FBZ0MsQ0FBQTtJQUVoQyx5Q0FBeUM7SUFDekMsMEdBQXFDLENBQUE7SUFFckMsNkJBQTZCO0lBQzdCLGdGQUF3QixDQUFBO0lBRXhCLDRCQUE0QjtJQUM1QixnRkFBd0IsQ0FBQTtJQUV4QixzQkFBc0I7SUFDdEIsb0VBQWtCLENBQUE7SUFFbEIsa0NBQWtDO0lBQ2xDLHdGQUE0QixDQUFBO0lBRTVCLDBCQUEwQjtJQUMxQiw0RUFBc0IsQ0FBQTtJQUV0QixzQkFBc0I7SUFDdEIsb0VBQWtCLENBQUE7SUFFbEIsc0JBQXNCO0lBQ3RCLG9FQUFrQixDQUFBO0lBRWxCLDBDQUEwQztJQUMxQyx3RkFBNEIsQ0FBQTtJQUU1Qiw2REFBNkQ7SUFDN0QsZ0dBQWdDLENBQUE7QUFFcEMsQ0FBQyxFQTlEVyxhQUFhLEtBQWIsYUFBYSxRQThEeEI7QUFFRCw4REFBOEQ7QUFDOUQsTUFBTSxVQUFVLGlCQUFpQjtJQUU3QixJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBeUIsQ0FBQztJQUc5QyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFakQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRXpDLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBRTdELE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUV2QyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUU3RCxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBRWpFLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUVuRCxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFFekQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUVqRSxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO0lBRXZGLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGdDQUFnQyxFQUFFLGtDQUFrQyxDQUFDLENBQUM7SUFFL0YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUVyRSxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBRXJFLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUV6RCxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO0lBRTdFLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFFakUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBRXpELE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUV6RCxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO0lBRTdFLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLDJCQUEyQixFQUFFLDZCQUE2QixDQUFDLENBQUM7SUFHckYsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gRXZlbnQgdHlwZSBjb2RlXG5leHBvcnQgZW51bSBFdmVudFR5cGVDb2RlIHtcbiBcbiAgICAvLyBVbmRlZmluZWQgWzBdIFxuICAgIFVOREVGSU5FRCA9IDAsXG4gXG4gICAgLy8gT3RoZXIgKFVua25vd24gRXZlbnQpIFsxXSBcbiAgICBPVEhFUiA9IDEsXG4gXG4gICAgLy8gRGV2aWNlIFRha2VvdmVyIFsyXSBcbiAgICBERVZJQ0VfVEFLRU9WRVIgPSAyLFxuIFxuICAgIC8vIEREb1MgWzNdIFxuICAgIERET1MgPSAzLFxuIFxuICAgIC8vIFVua25vd24gTWFsd2FyZSBbNF0gXG4gICAgVU5LTk9XTl9NQUxXQVJFID0gNCxcbiBcbiAgICAvLyBNYW4taW4tdGhlLU1pZGRsZSBbNV0gXG4gICAgTUFOX0lOX1RIRV9NSURETEUgPSA1LFxuIFxuICAgIC8vIERhdGEgVGhlZnQgWzZdIFxuICAgIERBVEFfVEhFRlQgPSA2LFxuIFxuICAgIC8vIFBvcnQgU2Nhbm5pbmcgWzddIFxuICAgIFBPUlRfU0NBTk5JTkcgPSA3LFxuIFxuICAgIC8vIEFibm9ybWFsIERvd25sb2FkIFs4XSBcbiAgICBBQk5PUk1BTF9ET1dOTE9BRCA9IDgsXG4gXG4gICAgLy8gQWJub3JtYWwgSW5jb21pbmcgQ29ubmVjdGlvbiBbOV0gXG4gICAgQUJOT1JNQUxfSU5DT01JTkdfQ09OTkVDVElPTiA9IDksXG4gXG4gICAgLy8gVW5zdWNjZXNzZnVsIENvbm5lY3Rpb24gQXR0ZW1wdHMgWzEwXSBcbiAgICBVTlNVQ0NFU1NGVUxfQ09OTkVDVElPTl9BVFRFTVBUUyA9IDEwLFxuIFxuICAgIC8vIEhpZ2ggVm9sdW1lIFRyYW5zbWl0IFsxMV0gXG4gICAgSElHSF9WT0xVTUVfVFJBTlNJVCA9IDExLFxuIFxuICAgIC8vIERldmljZSBMZXZlbCBBdHRhY2sgWzEyXSBcbiAgICBERVZJQ0VfTEVWRUxfQVRUQUNLID0gMTIsXG4gXG4gICAgLy8gUmVwbGF5IEF0dGFjayBbMTNdIFxuICAgIFJFUExBWV9BVFRBQ0sgPSAxMyxcbiBcbiAgICAvLyBBdHRlbXB0ZWQgRGV2aWNlIFRha2VvdmVyIFsxNF0gXG4gICAgREVWSUNFX1RBS0VPVkVSX0FUVEVNUFQgPSAxNCxcbiBcbiAgICAvLyBVbmtub3duIE9wZXJhdGlvbiBbMTVdIFxuICAgIFVOS05PV05fT1BFUkFUSU9OID0gMTUsXG4gXG4gICAgLy8gQ3J5cHRvIE1pbmluZyBbMTZdIFxuICAgIENSWVBUT19NSU5JTkcgPSAxNixcbiBcbiAgICAvLyBTdXNwaWNpb3VzIElQIFsxN10gXG4gICAgU1VTUElDSU9VU19JUCA9IDE3LFxuIFxuICAgIC8vIEFibm9ybWFsIG51bWJlciBvZiBvdXRib3VuZCBwb3J0cyBbMThdIFxuICAgIEFCTk9STUFMX09VVEJPVU5EX1BPUlRTID0gMTgsXG4gXG4gICAgLy8gQWJub3JtYWwgbnVtYmVyIG9mIG91dGJvdW5kIGVuZHBvaW50cyAoZGVzdGluYXRpb25zKSBbMTldIFxuICAgIEFCTk9STUFMX09VVEJPVU5EX0VORFBPSU5UUyA9IDE5LFxuIFxufVxuXG4vLyBSZXR1cm4gbGlzdCBvZiBFdmVudFR5cGVDb2RlIHZhbHVlcyBhbmQgdGhlaXIgZGlzcGxheSBuYW1lc1xuZXhwb3J0IGZ1bmN0aW9uIEdldEV2ZW50VHlwZUNvZGVzKCkgOiBNYXA8RXZlbnRUeXBlQ29kZSwgc3RyaW5nPiB7XG5cbiAgICBsZXQgcmVzdWx0ID0gbmV3IE1hcDxFdmVudFR5cGVDb2RlLCBzdHJpbmc+KCk7XG5cbiAgICBcbiAgICByZXN1bHQuc2V0KEV2ZW50VHlwZUNvZGUuVU5ERUZJTkVELCAnVW5kZWZpbmVkJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChFdmVudFR5cGVDb2RlLk9USEVSLCAnT3RoZXInKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KEV2ZW50VHlwZUNvZGUuREVWSUNFX1RBS0VPVkVSLCAnRGV2aWNlIFRha2VvdmVyJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChFdmVudFR5cGVDb2RlLkRET1MsICdEZG9zJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChFdmVudFR5cGVDb2RlLlVOS05PV05fTUFMV0FSRSwgJ1Vua25vd24gTWFsd2FyZScpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRXZlbnRUeXBlQ29kZS5NQU5fSU5fVEhFX01JRERMRSwgJ01hbiBJbiBUaGUgTWlkZGxlJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChFdmVudFR5cGVDb2RlLkRBVEFfVEhFRlQsICdEYXRhIFRoZWZ0Jyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChFdmVudFR5cGVDb2RlLlBPUlRfU0NBTk5JTkcsICdQb3J0IFNjYW5uaW5nJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChFdmVudFR5cGVDb2RlLkFCTk9STUFMX0RPV05MT0FELCAnQWJub3JtYWwgRG93bmxvYWQnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KEV2ZW50VHlwZUNvZGUuQUJOT1JNQUxfSU5DT01JTkdfQ09OTkVDVElPTiwgJ0Fibm9ybWFsIEluY29taW5nIENvbm5lY3Rpb24nKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KEV2ZW50VHlwZUNvZGUuVU5TVUNDRVNTRlVMX0NPTk5FQ1RJT05fQVRURU1QVFMsICdVbnN1Y2Nlc3NmdWwgQ29ubmVjdGlvbiBBdHRlbXB0cycpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRXZlbnRUeXBlQ29kZS5ISUdIX1ZPTFVNRV9UUkFOU0lULCAnSGlnaCBWb2x1bWUgVHJhbnNpdCcpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRXZlbnRUeXBlQ29kZS5ERVZJQ0VfTEVWRUxfQVRUQUNLLCAnRGV2aWNlIExldmVsIEF0dGFjaycpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRXZlbnRUeXBlQ29kZS5SRVBMQVlfQVRUQUNLLCAnUmVwbGF5IEF0dGFjaycpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRXZlbnRUeXBlQ29kZS5ERVZJQ0VfVEFLRU9WRVJfQVRURU1QVCwgJ0RldmljZSBUYWtlb3ZlciBBdHRlbXB0Jyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChFdmVudFR5cGVDb2RlLlVOS05PV05fT1BFUkFUSU9OLCAnVW5rbm93biBPcGVyYXRpb24nKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KEV2ZW50VHlwZUNvZGUuQ1JZUFRPX01JTklORywgJ0NyeXB0byBNaW5pbmcnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KEV2ZW50VHlwZUNvZGUuU1VTUElDSU9VU19JUCwgJ1N1c3BpY2lvdXMgSXAnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KEV2ZW50VHlwZUNvZGUuQUJOT1JNQUxfT1VUQk9VTkRfUE9SVFMsICdBYm5vcm1hbCBPdXRib3VuZCBQb3J0cycpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRXZlbnRUeXBlQ29kZS5BQk5PUk1BTF9PVVRCT1VORF9FTkRQT0lOVFMsICdBYm5vcm1hbCBPdXRib3VuZCBFbmRwb2ludHMnKTtcbiAgICBcblxuICAgIHJldHVybiByZXN1bHQ7XG59Il19