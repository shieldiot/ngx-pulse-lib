// Device status code
export var DeviceStatusCode;
(function (DeviceStatusCode) {
    // Undefined [0] 
    DeviceStatusCode[DeviceStatusCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Device is registered and pending verification [1] 
    DeviceStatusCode[DeviceStatusCode["PENDING"] = 1] = "PENDING";
    // Active device in the system [2] 
    DeviceStatusCode[DeviceStatusCode["ACTIVE"] = 2] = "ACTIVE";
    // Inactive device [3] 
    DeviceStatusCode[DeviceStatusCode["INACTIVE"] = 3] = "INACTIVE";
    // Blocked device [4] 
    DeviceStatusCode[DeviceStatusCode["BLOCKED"] = 4] = "BLOCKED";
})(DeviceStatusCode || (DeviceStatusCode = {}));
// Return list of DeviceStatusCode values and their display names
export function GetDeviceStatusCodes() {
    let result = new Map();
    result.set(DeviceStatusCode.UNDEFINED, 'Undefined');
    result.set(DeviceStatusCode.PENDING, 'Pending');
    result.set(DeviceStatusCode.ACTIVE, 'Active');
    result.set(DeviceStatusCode.INACTIVE, 'Inactive');
    result.set(DeviceStatusCode.BLOCKED, 'Blocked');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlU3RhdHVzQ29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wdWxzZS1saWIvc3JjL2xpYi9lbnVtcy9EZXZpY2VTdGF0dXNDb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLHFCQUFxQjtBQUNyQixNQUFNLENBQU4sSUFBWSxnQkFpQlg7QUFqQkQsV0FBWSxnQkFBZ0I7SUFFeEIsaUJBQWlCO0lBQ2pCLGlFQUFhLENBQUE7SUFFYixxREFBcUQ7SUFDckQsNkRBQVcsQ0FBQTtJQUVYLG1DQUFtQztJQUNuQywyREFBVSxDQUFBO0lBRVYsdUJBQXVCO0lBQ3ZCLCtEQUFZLENBQUE7SUFFWixzQkFBc0I7SUFDdEIsNkRBQVcsQ0FBQTtBQUVmLENBQUMsRUFqQlcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQWlCM0I7QUFFRCxpRUFBaUU7QUFDakUsTUFBTSxVQUFVLG9CQUFvQjtJQUVoQyxJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBNEIsQ0FBQztJQUdqRCxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVwRCxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVoRCxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU5QyxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVsRCxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUdoRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBEZXZpY2Ugc3RhdHVzIGNvZGVcbmV4cG9ydCBlbnVtIERldmljZVN0YXR1c0NvZGUge1xuIFxuICAgIC8vIFVuZGVmaW5lZCBbMF0gXG4gICAgVU5ERUZJTkVEID0gMCxcbiBcbiAgICAvLyBEZXZpY2UgaXMgcmVnaXN0ZXJlZCBhbmQgcGVuZGluZyB2ZXJpZmljYXRpb24gWzFdIFxuICAgIFBFTkRJTkcgPSAxLFxuIFxuICAgIC8vIEFjdGl2ZSBkZXZpY2UgaW4gdGhlIHN5c3RlbSBbMl0gXG4gICAgQUNUSVZFID0gMixcbiBcbiAgICAvLyBJbmFjdGl2ZSBkZXZpY2UgWzNdIFxuICAgIElOQUNUSVZFID0gMyxcbiBcbiAgICAvLyBCbG9ja2VkIGRldmljZSBbNF0gXG4gICAgQkxPQ0tFRCA9IDQsXG4gXG59XG5cbi8vIFJldHVybiBsaXN0IG9mIERldmljZVN0YXR1c0NvZGUgdmFsdWVzIGFuZCB0aGVpciBkaXNwbGF5IG5hbWVzXG5leHBvcnQgZnVuY3Rpb24gR2V0RGV2aWNlU3RhdHVzQ29kZXMoKSA6IE1hcDxEZXZpY2VTdGF0dXNDb2RlLCBzdHJpbmc+IHtcblxuICAgIGxldCByZXN1bHQgPSBuZXcgTWFwPERldmljZVN0YXR1c0NvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlU3RhdHVzQ29kZS5VTkRFRklORUQsICdVbmRlZmluZWQnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVN0YXR1c0NvZGUuUEVORElORywgJ1BlbmRpbmcnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVN0YXR1c0NvZGUuQUNUSVZFLCAnQWN0aXZlJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VTdGF0dXNDb2RlLklOQUNUSVZFLCAnSW5hY3RpdmUnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVN0YXR1c0NvZGUuQkxPQ0tFRCwgJ0Jsb2NrZWQnKTtcbiAgICBcblxuICAgIHJldHVybiByZXN1bHQ7XG59Il19