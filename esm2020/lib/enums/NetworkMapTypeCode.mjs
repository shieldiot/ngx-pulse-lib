// NetworkMapTypeCode represents the type of network maps
export var NetworkMapTypeCode;
(function (NetworkMapTypeCode) {
    // Undefined [0] 
    NetworkMapTypeCode[NetworkMapTypeCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Top devices network map [1] 
    NetworkMapTypeCode[NetworkMapTypeCode["TOP_DEVICES"] = 1] = "TOP_DEVICES";
    // Top malicious IP network map [2] 
    NetworkMapTypeCode[NetworkMapTypeCode["TOP_MALICIOUS_IPS"] = 2] = "TOP_MALICIOUS_IPS";
    // Network devices network map [3] 
    NetworkMapTypeCode[NetworkMapTypeCode["NETWORK"] = 3] = "NETWORK";
})(NetworkMapTypeCode || (NetworkMapTypeCode = {}));
// Return list of NetworkMapTypeCode values and their display names
export function GetNetworkMapTypeCodes() {
    let result = new Map();
    result.set(NetworkMapTypeCode.UNDEFINED, 'Undefined');
    result.set(NetworkMapTypeCode.TOP_DEVICES, 'Top Devices');
    result.set(NetworkMapTypeCode.TOP_MALICIOUS_IPS, 'Top Malicious Ips');
    result.set(NetworkMapTypeCode.NETWORK, 'Network');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmV0d29ya01hcFR5cGVDb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXB1bHNlLWxpYi9zcmMvbGliL2VudW1zL05ldHdvcmtNYXBUeXBlQ29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSx5REFBeUQ7QUFDekQsTUFBTSxDQUFOLElBQVksa0JBY1g7QUFkRCxXQUFZLGtCQUFrQjtJQUUxQixpQkFBaUI7SUFDakIscUVBQWEsQ0FBQTtJQUViLCtCQUErQjtJQUMvQix5RUFBZSxDQUFBO0lBRWYsb0NBQW9DO0lBQ3BDLHFGQUFxQixDQUFBO0lBRXJCLG1DQUFtQztJQUNuQyxpRUFBVyxDQUFBO0FBRWYsQ0FBQyxFQWRXLGtCQUFrQixLQUFsQixrQkFBa0IsUUFjN0I7QUFFRCxtRUFBbUU7QUFDbkUsTUFBTSxVQUFVLHNCQUFzQjtJQUVsQyxJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBOEIsQ0FBQztJQUduRCxNQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUV0RCxNQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUUxRCxNQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFFdEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFHbEQsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gTmV0d29ya01hcFR5cGVDb2RlIHJlcHJlc2VudHMgdGhlIHR5cGUgb2YgbmV0d29yayBtYXBzXG5leHBvcnQgZW51bSBOZXR3b3JrTWFwVHlwZUNvZGUge1xuIFxuICAgIC8vIFVuZGVmaW5lZCBbMF0gXG4gICAgVU5ERUZJTkVEID0gMCxcbiBcbiAgICAvLyBUb3AgZGV2aWNlcyBuZXR3b3JrIG1hcCBbMV0gXG4gICAgVE9QX0RFVklDRVMgPSAxLFxuIFxuICAgIC8vIFRvcCBtYWxpY2lvdXMgSVAgbmV0d29yayBtYXAgWzJdIFxuICAgIFRPUF9NQUxJQ0lPVVNfSVBTID0gMixcbiBcbiAgICAvLyBOZXR3b3JrIGRldmljZXMgbmV0d29yayBtYXAgWzNdIFxuICAgIE5FVFdPUksgPSAzLFxuIFxufVxuXG4vLyBSZXR1cm4gbGlzdCBvZiBOZXR3b3JrTWFwVHlwZUNvZGUgdmFsdWVzIGFuZCB0aGVpciBkaXNwbGF5IG5hbWVzXG5leHBvcnQgZnVuY3Rpb24gR2V0TmV0d29ya01hcFR5cGVDb2RlcygpIDogTWFwPE5ldHdvcmtNYXBUeXBlQ29kZSwgc3RyaW5nPiB7XG5cbiAgICBsZXQgcmVzdWx0ID0gbmV3IE1hcDxOZXR3b3JrTWFwVHlwZUNvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuICAgIHJlc3VsdC5zZXQoTmV0d29ya01hcFR5cGVDb2RlLlVOREVGSU5FRCwgJ1VuZGVmaW5lZCcpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoTmV0d29ya01hcFR5cGVDb2RlLlRPUF9ERVZJQ0VTLCAnVG9wIERldmljZXMnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KE5ldHdvcmtNYXBUeXBlQ29kZS5UT1BfTUFMSUNJT1VTX0lQUywgJ1RvcCBNYWxpY2lvdXMgSXBzJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChOZXR3b3JrTWFwVHlwZUNvZGUuTkVUV09SSywgJ05ldHdvcmsnKTtcbiAgICBcblxuICAgIHJldHVybiByZXN1bHQ7XG59Il19