// Event workflow status code
export var EventStatusCode;
(function (EventStatusCode) {
    // Undefined [0] 
    EventStatusCode[EventStatusCode["UNDEFINED"] = 0] = "UNDEFINED";
    // New event [1] 
    EventStatusCode[EventStatusCode["NEW"] = 1] = "NEW";
    // Open event, handled by the operator [2] 
    EventStatusCode[EventStatusCode["OPEN"] = 2] = "OPEN";
    // Closed event (tagged as True event) [3] 
    EventStatusCode[EventStatusCode["CLOSED_TRUE"] = 3] = "CLOSED_TRUE";
    // Closed event (tagged as False event) [4] 
    EventStatusCode[EventStatusCode["CLOSED_FALSE"] = 4] = "CLOSED_FALSE";
})(EventStatusCode || (EventStatusCode = {}));
// Return list of EventStatusCode values and their display names
export function GetEventStatusCodes() {
    let result = new Map();
    result.set(EventStatusCode.UNDEFINED, 'Undefined');
    result.set(EventStatusCode.NEW, 'New');
    result.set(EventStatusCode.OPEN, 'Open');
    result.set(EventStatusCode.CLOSED_TRUE, 'Closed True');
    result.set(EventStatusCode.CLOSED_FALSE, 'Closed False');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdGF0dXNDb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXB1bHNlLWxpYi9zcmMvbGliL2VudW1zL0V2ZW50U3RhdHVzQ29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSw2QkFBNkI7QUFDN0IsTUFBTSxDQUFOLElBQVksZUFpQlg7QUFqQkQsV0FBWSxlQUFlO0lBRXZCLGlCQUFpQjtJQUNqQiwrREFBYSxDQUFBO0lBRWIsaUJBQWlCO0lBQ2pCLG1EQUFPLENBQUE7SUFFUCwyQ0FBMkM7SUFDM0MscURBQVEsQ0FBQTtJQUVSLDJDQUEyQztJQUMzQyxtRUFBZSxDQUFBO0lBRWYsNENBQTRDO0lBQzVDLHFFQUFnQixDQUFBO0FBRXBCLENBQUMsRUFqQlcsZUFBZSxLQUFmLGVBQWUsUUFpQjFCO0FBRUQsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxtQkFBbUI7SUFFL0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQTJCLENBQUM7SUFHaEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRW5ELE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUV2QyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFekMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRXZELE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQztJQUd6RCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBFdmVudCB3b3JrZmxvdyBzdGF0dXMgY29kZVxuZXhwb3J0IGVudW0gRXZlbnRTdGF0dXNDb2RlIHtcbiBcbiAgICAvLyBVbmRlZmluZWQgWzBdIFxuICAgIFVOREVGSU5FRCA9IDAsXG4gXG4gICAgLy8gTmV3IGV2ZW50IFsxXSBcbiAgICBORVcgPSAxLFxuIFxuICAgIC8vIE9wZW4gZXZlbnQsIGhhbmRsZWQgYnkgdGhlIG9wZXJhdG9yIFsyXSBcbiAgICBPUEVOID0gMixcbiBcbiAgICAvLyBDbG9zZWQgZXZlbnQgKHRhZ2dlZCBhcyBUcnVlIGV2ZW50KSBbM10gXG4gICAgQ0xPU0VEX1RSVUUgPSAzLFxuIFxuICAgIC8vIENsb3NlZCBldmVudCAodGFnZ2VkIGFzIEZhbHNlIGV2ZW50KSBbNF0gXG4gICAgQ0xPU0VEX0ZBTFNFID0gNCxcbiBcbn1cblxuLy8gUmV0dXJuIGxpc3Qgb2YgRXZlbnRTdGF0dXNDb2RlIHZhbHVlcyBhbmQgdGhlaXIgZGlzcGxheSBuYW1lc1xuZXhwb3J0IGZ1bmN0aW9uIEdldEV2ZW50U3RhdHVzQ29kZXMoKSA6IE1hcDxFdmVudFN0YXR1c0NvZGUsIHN0cmluZz4ge1xuXG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXA8RXZlbnRTdGF0dXNDb2RlLCBzdHJpbmc+KCk7XG5cbiAgICBcbiAgICByZXN1bHQuc2V0KEV2ZW50U3RhdHVzQ29kZS5VTkRFRklORUQsICdVbmRlZmluZWQnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KEV2ZW50U3RhdHVzQ29kZS5ORVcsICdOZXcnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KEV2ZW50U3RhdHVzQ29kZS5PUEVOLCAnT3BlbicpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRXZlbnRTdGF0dXNDb2RlLkNMT1NFRF9UUlVFLCAnQ2xvc2VkIFRydWUnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KEV2ZW50U3RhdHVzQ29kZS5DTE9TRURfRkFMU0UsICdDbG9zZWQgRmFsc2UnKTtcbiAgICBcblxuICAgIHJldHVybiByZXN1bHQ7XG59Il19