// Set the device unique identity policy
export var DeviceIdentityCode;
(function (DeviceIdentityCode) {
    // Undefined [0] 
    DeviceIdentityCode[DeviceIdentityCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Device Identity is provided by the system [1] 
    DeviceIdentityCode[DeviceIdentityCode["AUTO"] = 1] = "AUTO";
    // Device Identity is based on static IP: ip@stream_id [2] 
    DeviceIdentityCode[DeviceIdentityCode["IP"] = 2] = "IP";
    // Device Identity is based on Subscriber Id: imsi@stream_id [3] 
    DeviceIdentityCode[DeviceIdentityCode["IMSI"] = 3] = "IMSI";
    // Device Identity is based on SIM ICCID: iccid@stream_id [4] 
    DeviceIdentityCode[DeviceIdentityCode["ICCID"] = 4] = "ICCID";
    // Device Identity is based on MSISDN: msisdn@stream_id [5] 
    DeviceIdentityCode[DeviceIdentityCode["MSISDN"] = 5] = "MSISDN";
    // Device Identity is based on Equipment Id: imei@stream_id [6] 
    DeviceIdentityCode[DeviceIdentityCode["IMEI"] = 6] = "IMEI";
    // Device Identity is based on MAC address: mac@stream_id [7] 
    DeviceIdentityCode[DeviceIdentityCode["MAC"] = 7] = "MAC";
})(DeviceIdentityCode || (DeviceIdentityCode = {}));
// Return list of DeviceIdentityCode values and their display names
export function GetDeviceIdentityCodes() {
    let result = new Map();
    result.set(DeviceIdentityCode.UNDEFINED, 'Undefined');
    result.set(DeviceIdentityCode.AUTO, 'Auto');
    result.set(DeviceIdentityCode.IP, 'Ip');
    result.set(DeviceIdentityCode.IMSI, 'Imsi');
    result.set(DeviceIdentityCode.ICCID, 'Iccid');
    result.set(DeviceIdentityCode.MSISDN, 'Msisdn');
    result.set(DeviceIdentityCode.IMEI, 'Imei');
    result.set(DeviceIdentityCode.MAC, 'Mac');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlSWRlbnRpdHlDb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXB1bHNlLWxpYi9zcmMvbGliL2VudW1zL0RldmljZUlkZW50aXR5Q29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSx3Q0FBd0M7QUFDeEMsTUFBTSxDQUFOLElBQVksa0JBMEJYO0FBMUJELFdBQVksa0JBQWtCO0lBRTFCLGlCQUFpQjtJQUNqQixxRUFBYSxDQUFBO0lBRWIsaURBQWlEO0lBQ2pELDJEQUFRLENBQUE7SUFFUiwyREFBMkQ7SUFDM0QsdURBQU0sQ0FBQTtJQUVOLGlFQUFpRTtJQUNqRSwyREFBUSxDQUFBO0lBRVIsOERBQThEO0lBQzlELDZEQUFTLENBQUE7SUFFVCw0REFBNEQ7SUFDNUQsK0RBQVUsQ0FBQTtJQUVWLGdFQUFnRTtJQUNoRSwyREFBUSxDQUFBO0lBRVIsOERBQThEO0lBQzlELHlEQUFPLENBQUE7QUFFWCxDQUFDLEVBMUJXLGtCQUFrQixLQUFsQixrQkFBa0IsUUEwQjdCO0FBRUQsbUVBQW1FO0FBQ25FLE1BQU0sVUFBVSxzQkFBc0I7SUFFbEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQThCLENBQUM7SUFHbkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFdEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFeEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFaEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFHMUMsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gU2V0IHRoZSBkZXZpY2UgdW5pcXVlIGlkZW50aXR5IHBvbGljeVxuZXhwb3J0IGVudW0gRGV2aWNlSWRlbnRpdHlDb2RlIHtcbiBcbiAgICAvLyBVbmRlZmluZWQgWzBdIFxuICAgIFVOREVGSU5FRCA9IDAsXG4gXG4gICAgLy8gRGV2aWNlIElkZW50aXR5IGlzIHByb3ZpZGVkIGJ5IHRoZSBzeXN0ZW0gWzFdIFxuICAgIEFVVE8gPSAxLFxuIFxuICAgIC8vIERldmljZSBJZGVudGl0eSBpcyBiYXNlZCBvbiBzdGF0aWMgSVA6IGlwQHN0cmVhbV9pZCBbMl0gXG4gICAgSVAgPSAyLFxuIFxuICAgIC8vIERldmljZSBJZGVudGl0eSBpcyBiYXNlZCBvbiBTdWJzY3JpYmVyIElkOiBpbXNpQHN0cmVhbV9pZCBbM10gXG4gICAgSU1TSSA9IDMsXG4gXG4gICAgLy8gRGV2aWNlIElkZW50aXR5IGlzIGJhc2VkIG9uIFNJTSBJQ0NJRDogaWNjaWRAc3RyZWFtX2lkIFs0XSBcbiAgICBJQ0NJRCA9IDQsXG4gXG4gICAgLy8gRGV2aWNlIElkZW50aXR5IGlzIGJhc2VkIG9uIE1TSVNETjogbXNpc2RuQHN0cmVhbV9pZCBbNV0gXG4gICAgTVNJU0ROID0gNSxcbiBcbiAgICAvLyBEZXZpY2UgSWRlbnRpdHkgaXMgYmFzZWQgb24gRXF1aXBtZW50IElkOiBpbWVpQHN0cmVhbV9pZCBbNl0gXG4gICAgSU1FSSA9IDYsXG4gXG4gICAgLy8gRGV2aWNlIElkZW50aXR5IGlzIGJhc2VkIG9uIE1BQyBhZGRyZXNzOiBtYWNAc3RyZWFtX2lkIFs3XSBcbiAgICBNQUMgPSA3LFxuIFxufVxuXG4vLyBSZXR1cm4gbGlzdCBvZiBEZXZpY2VJZGVudGl0eUNvZGUgdmFsdWVzIGFuZCB0aGVpciBkaXNwbGF5IG5hbWVzXG5leHBvcnQgZnVuY3Rpb24gR2V0RGV2aWNlSWRlbnRpdHlDb2RlcygpIDogTWFwPERldmljZUlkZW50aXR5Q29kZSwgc3RyaW5nPiB7XG5cbiAgICBsZXQgcmVzdWx0ID0gbmV3IE1hcDxEZXZpY2VJZGVudGl0eUNvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlSWRlbnRpdHlDb2RlLlVOREVGSU5FRCwgJ1VuZGVmaW5lZCcpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlSWRlbnRpdHlDb2RlLkFVVE8sICdBdXRvJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VJZGVudGl0eUNvZGUuSVAsICdJcCcpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlSWRlbnRpdHlDb2RlLklNU0ksICdJbXNpJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VJZGVudGl0eUNvZGUuSUNDSUQsICdJY2NpZCcpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlSWRlbnRpdHlDb2RlLk1TSVNETiwgJ01zaXNkbicpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlSWRlbnRpdHlDb2RlLklNRUksICdJbWVpJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VJZGVudGl0eUNvZGUuTUFDLCAnTWFjJyk7XG4gICAgXG5cbiAgICByZXR1cm4gcmVzdWx0O1xufSJdfQ==