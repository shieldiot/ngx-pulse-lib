// DeviceScoreConfig is a set of parameters for device score config
export class DeviceScoreConfig {
    constructor(deviceScoreAlphaFactor, occurrenceThreshold, ruleCountThreshold, lowWeightAlphaFactor, mediumWeightAlphaFactor, highWeightAlphaFactor, highVolumeWeightAlphaFactor, abnormalOutPortsAlphaFactor, abnormalOutEndpointsAlphaFactor, suspiciousIpAlphaFactor, defaultSeverityRange, defaultSeverityFactor, severityConditionConfigs, ruleCountThresholdConfigs, ruleBasedSeverityConditionConfigs, isSeverityBased, isAlertBased) {
        if (deviceScoreAlphaFactor !== undefined) {
            this.deviceScoreAlphaFactor = deviceScoreAlphaFactor;
        }
        if (occurrenceThreshold !== undefined) {
            this.occurrenceThreshold = occurrenceThreshold;
        }
        if (ruleCountThreshold !== undefined) {
            this.ruleCountThreshold = ruleCountThreshold;
        }
        if (lowWeightAlphaFactor !== undefined) {
            this.lowWeightAlphaFactor = lowWeightAlphaFactor;
        }
        if (mediumWeightAlphaFactor !== undefined) {
            this.mediumWeightAlphaFactor = mediumWeightAlphaFactor;
        }
        if (highWeightAlphaFactor !== undefined) {
            this.highWeightAlphaFactor = highWeightAlphaFactor;
        }
        if (highVolumeWeightAlphaFactor !== undefined) {
            this.highVolumeWeightAlphaFactor = highVolumeWeightAlphaFactor;
        }
        if (abnormalOutPortsAlphaFactor !== undefined) {
            this.abnormalOutPortsAlphaFactor = abnormalOutPortsAlphaFactor;
        }
        if (abnormalOutEndpointsAlphaFactor !== undefined) {
            this.abnormalOutEndpointsAlphaFactor = abnormalOutEndpointsAlphaFactor;
        }
        if (suspiciousIpAlphaFactor !== undefined) {
            this.suspiciousIpAlphaFactor = suspiciousIpAlphaFactor;
        }
        if (defaultSeverityRange !== undefined) {
            this.defaultSeverityRange = defaultSeverityRange;
        }
        if (defaultSeverityFactor !== undefined) {
            this.defaultSeverityFactor = defaultSeverityFactor;
        }
        if (severityConditionConfigs !== undefined) {
            this.severityConditionConfigs = severityConditionConfigs;
        }
        if (ruleCountThresholdConfigs !== undefined) {
            this.ruleCountThresholdConfigs = ruleCountThresholdConfigs;
        }
        if (ruleBasedSeverityConditionConfigs !== undefined) {
            this.ruleBasedSeverityConditionConfigs = ruleBasedSeverityConditionConfigs;
        }
        if (isSeverityBased !== undefined) {
            this.isSeverityBased = isSeverityBased;
        }
        if (isAlertBased !== undefined) {
            this.isAlertBased = isAlertBased;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,